apiVersion: batch/v1
kind: Job
metadata:
 name: gaia-ta1-pipeline
spec:
  backoffLimit: 0
  template:
 #   metadata:
 #     name: gaia-ta1-pipeline
    spec:
      volumes:
        - name: input-efs
          nfs:
            server: fs-f330b371.efs.us-east-1.amazonaws.com #m36-dryrun-source-LDC2020E11-SMALL
            path: /
        - name: output-efs
          nfs:
            server: fs-4bc84ac9.efs.us-east-1.amazonaws.com #teamgaia-ta1-output # sudo mount -t
            path: /
        #If you want to use a local folder as a volume, you can remove the NFS above and recreate them with a local volume for testing. The names need to match with the volumeMounts of the container
        # - name: input-efs
          # hostPath:
          # path: "C:/some/local/input"
        # - name: output-efs
          # hostPath:
          # path: "C:/some/local/output"

      initContainers:

###############################
# ISI AIDA-TOOLS
###############################
## ISI: DPN
## see https://hub.docker.com/repository/docker/gaiaaida/aida-tools
## python ./extract_mp4.py ./extract_mp4.docker_default.param
      - name: isi-aida-tools
        image: gaiaaida/aida-tools:0.2
        imagePullPolicy: IfNotPresent
        env:
        - name: parent_child_tab
          value: "/input/docs/parent_children.tab"
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: INPUT_MP4_LDCC
          value: "/input/data/mp4"
        - name: OUTPUT_MP4
          value: "/output/WORKING/mp4"
        command: ["/bin/bash", "-c"]
        args:
         - echo `date` - "** START AIDA Tools **";
           ls -ahl ${INPUT_MP4_LDCC};
           mkdir -p ${OUTPUT_MP4};
           echo -e "input_mp4_ldcc_dir:${INPUT_MP4_LDCC} \noutput_mp4_dir:${OUTPUT_MP4} \n" > ./M36.param;
           cat ./M36.param;
           /root/conda/envs/aida-env/bin/python ./extract_mp4.py ./M36.param;
           ls -ahl ${OUTPUT_MP4};
           echo `date` - "END AIDA Tools";

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

###############################
# ISI OCR
###############################
## ISI: DPN; Xujun Peng
## see: https://github.com/isi-vista/aida-integration/#ocr

###############################
# ISI ASR
###############################
## ISI: DPN: Xujun Peng
## see https://github.com/isi-vista/aida-integration/#asr
## $ docker run -it -e CUDA_VISIBLE_DEVICES=${AVAILABLE_GPU} --gpus=${AVAILABLE_GPU} --name asr  -v /host/location/output:/output gaiaaida/asr:0.2
      - name: isi-asr
        image: gaiaaida/asr:0.2
        imagePullPolicy: IfNotPresent
        env:
        - name: parent_child_tab
          value: "/input/docs/parent_children.tab"
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        command: ["/bin/bash", "-c"]
        args:
         - echo `date` - "** START ASR **";
           ls -ahl /output/WORKING/mp4/;
           mkdir -p /output/WORKING/output/;
           /bin/bash -c ./entrypoint.sh;
           ls -ahl /output/WORKING/output/;
           echo `date` - "END ASR"};

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Columbia University Object Detection
################################
## CU: Alireza Zareian
## https://hub.docker.com/repository/docker/gaiaaida/object-detection
## See https://github.com/isi-vista/aida-integration/#columbia-university-object-detection
      - name: cu-object-detection
        image: gaiaaida/object-detection:0.3
        imagePullPolicy: IfNotPresent
        env:
        - name: parent_child_tab
          value: "/input/docs/parent_children.tab"
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: OBJDET_OUTPUT
          value: "/output/WORKING/cu_objdet_results/"
        - name: CORPUS
          value: "/input"
        - name: INPUT
          value: "/input"
        - name: OUTPUT
          value: "/output/WORKING"
        command: ["/bin/bash", "-c"]
        args:
         - echo `date` - "** START CU Object Detection **";
           echo "INPUT "${INPUT};
           echo "CORPUS "${CORPUS};
           echo "OUTPUT "${OUTPUT};
           echo "OBJDET_OUTPUT "${OBJDET_OUTPUT};
           ls -ahl /input/docs/;
           ls -ahl /input/data/jpg/;
           ls -ahl /input/data/video_shot_boundaries/representative_frames/;
           mkdir -p ${OBJDET_OUTPUT};
           /bin/bash -c ./full_script.sh;
           ls -ahl /output/;
           echo "OBJDET_OUTPUT "${OBJDET_OUTPUT};
           ls -ahl ${OBJDET_OUTPUT};
           echo `date` - "END CU Object Detection";

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## USC Object Detection
################################
## USC: Haidong Zhu
## https://hub.docker.com/repository/docker/gaiaaida/detection-grounding
## See https://github.com/isi-vista/aida-integration/#usc-object-detection

      - name: usc-object-detection
        image: gaiaaida/detection-grounding:0.2
        imagePullPolicy: IfNotPresent
        env:
        - name: parent_child_tab
          value: "/input/docs/parent_children.tab"
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: INPUT
          value: "/input"
        - name: OUTPUT
          value: "/output"
        - name: SHARED
          value: "/output/WORKING"
        - name: OBJDET_OUTPUT
          value: "/output/WORKING/usc-object-detection/"
        command: ["/bin/bash", "-c"]
        args:
# this should only do the USC object detection, not the grounding.
         - echo `date` - "** START USC Object Detection **";
           echo "INPUT "${INPUT};
           echo "OUTPUT "${OUTPUT};
           echo "SHARED "${SHARED};
           echo "OBJDET_OUTPUT "${OBJDET_OUTPUT};
           ls -ahl /input/docs/;
           ls -ahl /input/data/jpg/;
           ls -ahl /input/data/video_shot_boundaries/representative_frames/;
           mkdir -p ${OBJDET_OUTPUT};
           find . -name '*.pickle';
           find ${OUTPUT} -name '*.pickle';
           cd /aida/src/;
           /root/conda/envs/aida-env/bin/python ./code/smoke_test.py;
           /root/conda/envs/aida-env/bin/python ./code/aida_ds_creator.py;
           conda activate aida-env && which python;
           ls -ahl ./;
           RESULTS=./*.*;
           cp ${RESULTS} ${OBJDET_OUTPUT};
           echo `date` - "END USC Object Detection";
# TODO: confirm exact files copied out.
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## setup-edl-rsd
################################
      - name: setup-edl-rsd
        image: limanling/uiuc_ie_m36
        command: ["/bin/bash", "-c"]
        args:
         - echo `date` - "** START setup edl rsd **";
           mkdir -p /output/WORKING/system/data;
           mkdir -p /output/WORKING/system/aida_edl;
           mkdir -p /output/WORKING/system/rsd;
           wget -nc http://159.89.180.81/demo/resources/edl_data.tar.gz -P /output/WORKING/system/aida_edl;
           tar zxvf /output/WORKING/system/aida_edl/edl_data.tar.gz -C /output/WORKING/data;
           perl /input/tools/ltf2txt/ltf2rsd.perl -o /output/WORKING/system/rsd /input/data/ltf;
           echo `date` - "END setup edl rsd";
        volumeMounts:
          - name: input-efs
            mountPath: /input
            readOnly: true
          - name: output-efs
            mountPath: /output #Please put your output here

###############################
# detect-lang
###############################
      - name: detect-lang
        image: limanling/uiuc_ie_m36

# 2020-09-21 ADD --langs en ru es --parent_child_tab_path ${parent_child_tab_path}
#        command: ["/opt/conda/envs/py36/bin/python", "/preprocessing/preprocess_detect_languages.py", "/output/WORKING/system/rsd", "/input/data/ltf", "/output/WORKING/data", "--langs en ru es", "--parent_child_tab_path /input/docs/parent_children.tab"]

        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START detect lang **";
            /opt/conda/envs/py36/bin/python /preprocessing/preprocess_detect_languages.py /output/WORKING/system/rsd /input/data/ltf /output/WORKING/data --langs en ru es --parent_child_tab_path /input/docs/parent_children.tab &
            wait;
            echo `date` - "END detect lang";

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

# ###############################################################################
# # BEGIN - Commented per Dan and Manling
# ###############################################################################

      # - name: asr
        # image: limanling/uiuc_ie_m18
        # imagePullPolicy: IfNotPresent
        # env:
        # - name: en_asr_aln
          # value: null
        # - name: en_asr_rsd
          # value: "/output/WORKING/data/en_asr/rsd"
        # - name: en_asr_rsd_file_list
          # value: "/output/WORKING/data/en_asr/en_asr_truecase_list"
        # - name: en_asr_ltf
          # value: "/output/WORKING/data/en_asr/ltf"
        # - name: en_asr_mapping_file_path
          # value: "/output/WORKING/data/en_asr/en_asr_mapping"
        # command: ["/bin/bash", "-c"]
        # args:
          # - /opt/conda/envs/py36/bin/python /preprocessing/preprocess_asr.py ${en_asr_aln} $(en_asr_rsd) $(en_asr_rsd_file_list);
          # #for merging, temp placement
          # - mkdir -p /output/WORKING/data/kb/ttl/final;
            # mkdir -p $(en_asr_ltf);
            # /opt/conda/envs/py36/bin/python /aida_utilities/rsd2ltf.py $(en_asr_rsd) $(en_asr_ltf) --seg_option nltk+linebreak --tok_option space --extension .rsd.txt;
            # /opt/conda/envs/py36/bin/python /preprocessing/asr_sentence_mapping.py $(en_asr_ltf) ${en_asr_aln} $(en_asr_mapping_file_path)
        # volumeMounts:
          # - name: input-efs
            # mountPath: "/input"
            # readOnly: true #Input Volume for worker will be set to readOnly
          # - name: output-efs
            # mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)
      # - name: english-ocr
        # image: limanling/uiuc_ie_m18
        # imagePullPolicy: IfNotPresent
        # env:
        # - name: en_ocr_csv_file
          # value: null
        # - name: en_ocr_rsd
          # value: "/output/WORKING/data/en_ocr/rsd"
        # - name: en_ocr_ltf
          # value: "/output/WORKING/data/en_ocr/ltf"
        # command: ["/bin/bash", "-c"]
        # args:
          # #- /opt/conda/envs/py36/bin/python /preprocessing/preprocess_ocr.py ${en_ocr_csv_file} ${en_ocr_rsd}
          # - mkdir -p ${en_ocr_ltf};
            # /opt/conda/envs/py36/bin/python /aida_utilities/rsd2ltf.py ${en_ocr_rsd} ${en_ocr_ltf} --seg_option nltk+linebreak --tok_option unitok --extension .rsd.txt
        # volumeMounts:
          # - name: input-efs
            # mountPath: "/input"
            # readOnly: true #Input Volume for worker will be set to readOnly
          # - name: output-efs
            # mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)
      # - name: russian-ocr
        # image: limanling/uiuc_ie_m18
        # imagePullPolicy: IfNotPresent
        # env:
        # - name: ru_ocr_csv_file
          # value: null
        # - name: ru_ocr_rsd
          # value: "/output/WORKING/data/ru_ocr/rsd"
        # - name: ru_ocr_ltf
          # value: "/output/WORKING/data/ru_ocr/ltf"
        # command: ["/bin/bash", "-c"]
        # args:
          # #- /opt/conda/envs/py36/bin/python /preprocessing/preprocess_ocr.py ${ru_ocr_csv_file} ${ru_ocr_rsd}
          # - mkdir -p ${ru_ocr_ltf}
          # - /opt/conda/envs/py36/bin/python /aida_utilities/rsd2ltf.py ${ru_ocr_rsd} ${ru_ocr_ltf} --seg_option nltk+linebreak --tok_option unitok --extension .rsd.txt
        # volumeMounts:
          # - name: input-efs
            # mountPath: "/input"
            # readOnly: true #Input Volume for worker will be set to readOnly
          # - name: output-efs
            # mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

# ###############################################################################
# # END - Commented per Dan and Manling
# ###############################################################################

################################
## generate-bio-list-en
################################
      - name: generate-bio-list-en
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: ltf_file_list
          value: "/output/WORKING/data/en/ltf_lst"
        - name: edl_bio
          value: "/output/WORKING/data/en/edl/en.bio"
        - name: rsd_source
          value: "/output/WORKING/data/en/rsd"
        - name: rsd_file_list
          value: "/output/WORKING/data/en/rsd_lst"
        - name: timetable_tab
          value: "/output/WORKING/data/en/time_table.tab"
        #RUSSIAN
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: ltf_file_list_ru
          value: "/output/WORKING/data/ru/ltf_lst"
        - name: edl_bio_ru
          value: "/output/WORKING/data/ru/edl/ru.bio"
        - name: rsd_source_ru
          value: "/output/WORKING/data/ru/rsd"
        - name: rsd_file_list_ru
          value: "/output/WORKING/data/ru/rsd_lst"
        - name: timetable_tab_ru
          value: "/output/WORKING/data/ru/time_table.tab"
        #SPANISH
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: ltf_file_list_es
          value: "/output/WORKING/data/es/ltf_lst"
        - name: edl_bio_es
          value: "/output/WORKING/data/es/edl/es.bio"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        - name: rsd_file_list_es
          value: "/output/WORKING/data/es/rsd_lst"
        - name: timetable_tab_es
          value: "/output/WORKING/data/es/time_table.tab"
        - name: parent_child_tab
          value: "/input/docs/parent_children.tab"
        - name: sorted
          value: "0"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START generate bio list **";
            mkdir -p /output/WORKING/data/es/ltf;
            mkdir -p /output/WORKING/data/en/ltf;
            mkdir -p /output/WORKING/data/ru/ltf;
            mkdir -p /output/WORKING/data/es/edl;
            mkdir -p /output/WORKING/data/en/edl;
            mkdir -p /output/WORKING/data/ru/edl;
            /opt/conda/envs/py36/bin/python /aida_utilities/ltf2bio.py ${ltf_source} ${edl_bio};
            /opt/conda/envs/py36/bin/python /aida_utilities/dir_readlink.py ${rsd_source} ${rsd_file_list};
            /opt/conda/envs/py36/bin/python /aida_utilities/dir_ls.py ${ltf_source} ${ltf_file_list};
            /opt/conda/envs/py36/bin/python /aida_utilities/parent_child_util.py ${parent_child_tab} ${sorted} ${timetable_tab};
            /opt/conda/envs/py36/bin/python /aida_utilities/ltf2bio.py ${ltf_source_ru} ${edl_bio_ru};
            /opt/conda/envs/py36/bin/python /aida_utilities/dir_readlink.py ${rsd_source_ru} ${rsd_file_list_ru};
            /opt/conda/envs/py36/bin/python /aida_utilities/dir_ls.py ${ltf_source_ru} ${ltf_file_list_ru};
            /opt/conda/envs/py36/bin/python /aida_utilities/parent_child_util.py ${parent_child_tab} ${sorted} ${timetable_tab_ru};
            /opt/conda/envs/py36/bin/python /aida_utilities/ltf2bio.py ${ltf_source_es} ${edl_bio_es};
            /opt/conda/envs/py36/bin/python /aida_utilities/dir_readlink.py ${rsd_source_es} ${rsd_file_list_es};
            /opt/conda/envs/py36/bin/python /aida_utilities/dir_ls.py ${ltf_source_es} ${ltf_file_list_es};
            /opt/conda/envs/py36/bin/python /aida_utilities/parent_child_util.py ${parent_child_tab} ${sorted} ${timetable_tab_es};
            echo `date` - "END generate bio list";

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true
          - name: output-efs
            mountPath: "/output"

################################
## timetable-tab
################################
      - name: timetable-tab
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        - name: parent_child_tab
          value: "/input/docs/parent_children.tab"
        - name: sorted
          value: "0"
        - name: timetable_tab
          value: "/output/WORKING/data/en/time_table.tab"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START timetable tab **";
            /opt/conda/envs/py36/bin/python /aida_utilities/parent_child_util.py ${parent_child_tab} ${sorted} ${timetable_tab};
            echo `date` - "END timetable tab";
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true
          - name: output-efs
            mountPath: "/output"

################################
## apply-stanford-corenlp
################################
      - name: apply-stanford-corenlp
        image: limanling/aida-tools
        workingDir: /stanford-corenlp-aida_0
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: rsd_file_list
          value: "/output/WORKING/data/en/rsd_lst"
        - name: timetable_tab
          value: "/output/WORKING/data/en/time_table.tab"
        - name: core_nlp_output_path
          value: "/output/WORKING/data/en/corenlp"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: rsd_file_list_ru
          value: "/output/WORKING/data/ru/rsd_lst"
        - name: timetable_tab_ru
          value: "/output/WORKING/data/ru/time_table.tab"
        - name: core_nlp_output_path_ru
          value: "/output/WORKING/data/ru/corenlp"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: rsd_file_list_es
          value: "/output/WORKING/data/es/rsd_lst"
        - name: timetable_tab_es
          value: "/output/WORKING/data/es/time_table.tab"
        - name: core_nlp_output_path_es
          value: "/output/WORKING/data/es/corenlp"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START apply Stanford corenlp **";
            java -mx50g -cp '/stanford-corenlp-aida_0/*' edu.stanford.nlp.pipeline.StanfordCoreNLP $* -annotators 'tokenize,cleanxml,ssplit,pos,lemma,ner,depparse,entitymentions,parse' -outputFormat json -filelist ${rsd_file_list} -ner.docdate.useMappingFile ${timetable_tab} -properties StanfordCoreNLP_${lang}.properties -outputDirectory ${core_nlp_output_path} &
            java -mx150g -cp '/stanford-corenlp-aida_0/*' edu.stanford.nlp.pipeline.StanfordCoreNLP $* -annotators 'tokenize,cleanxml,ssplit,pos,lemma,ner,depparse,entitymentions,parse' -outputFormat json -filelist ${rsd_file_list_ru} -ner.docdate.useMappingFile ${timetable_tab_ru} -properties StanfordCoreNLP_${lang_ru}.properties -outputDirectory ${core_nlp_output_path_ru} &
            java -mx50g -cp '/stanford-corenlp-aida_0/*' edu.stanford.nlp.pipeline.StanfordCoreNLP $* -annotators 'tokenize,cleanxml,ssplit,pos,lemma,ner,depparse,entitymentions,parse' -outputFormat json -filelist ${rsd_file_list_es} -ner.docdate.useMappingFile ${timetable_tab_es} -properties StanfordCoreNLP_${lang_es}.properties -outputDirectory ${core_nlp_output_path_es} &
            wait;
            echo `date` - "END apply Stanford corenlp";
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true
          - name: output-efs
            mountPath: "/output"

################################
## universal-dependency-parser-chunk
################################
      - name: universal-dependency-parser-chunk
        image: dylandilu/chuck_coreference
        workingDir: /scr
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: core_nlp_output_path
          value: "/output/WORKING/data/en/corenlp"
        - name: edl_bio
          value: "/output/WORKING/data/en/edl/en.bio"
        - name: udp_dir
          value: "/output/WORKING/data/en/udp"
        - name: rsd_source
          value: "/output/WORKING/data/en/rsd"
        - name: chunk_file
          value: "/output/WORKING/data/en/edl/chunk.txt"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: core_nlp_output_path_ru
          value: "/output/WORKING/data/ru/corenlp"
        - name: edl_bio_ru
          value: "/output/WORKING/data/ru/edl/ru.bio"
        - name: udp_dir_ru
          value: "/output/WORKING/data/ru/udp"
        - name: rsd_source_ru
          value: "/output/WORKING/data/ru/rsd"
        - name: chunk_file_ru
          value: "/output/WORKING/data/ru/edl/chunk.txt"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: core_nlp_output_path_es
          value: "/output/WORKING/data/es/corenlp"
        - name: edl_bio_es
          value: "/output/WORKING/data/es/edl/es.bio"
        - name: udp_dir_es
          value: "/output/WORKING/data/es/udp"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        - name: chunk_file_es
          value: "/output/WORKING/data/es/edl/chunk.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START universal dependency parser chunk **";
            mkdir -p ${udp_dir};
            mkdir -p ${udp_dir_ru};
            mkdir -p ${udp_dir_es};
            python bio2udp.py --corenlp_dir ${core_nlp_output_path} --lang ${lang} --path_bio ${edl_bio} --udp_dir ${udp_dir};
            echo "finish universal dependency parser for "${lang};
            python chunk_mine.py --udp_dir ${udp_dir} --text_dir ${rsd_source} --path_out_chunk ${chunk_file};
            echo "finish chunking for "${lang};
            python bio2udp.py --corenlp_dir ${core_nlp_output_path_ru} --lang ${lang_ru} --path_bio ${edl_bio_ru} --udp_dir ${udp_dir_ru};
            echo "finish universal dependency parser for "${lang_ru};
            python chunk_mine.py --udp_dir ${udp_dir_ru} --text_dir ${rsd_source_ru} --path_out_chunk ${chunk_file_ru};
            echo "finish chunking for "${lang_ru};
            python bio2udp.py --corenlp_dir ${core_nlp_output_path_es} --lang ${lang_es} --path_bio ${edl_bio_es} --udp_dir ${udp_dir_es};
            echo "finish universal dependency parser for "${lang_es};
            python chunk_mine.py --udp_dir ${udp_dir_es} --text_dir ${rsd_source_es} --path_out_chunk ${chunk_file_es};
            echo "finish chunking for "${lang_es};
            echo `date` - "END universal dependency parser chunk";
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true
          - name: output-efs
            mountPath: "/output"

################################
## process-framenet-generate
################################
      - name: process-framenet-generate
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: ltf_txt_path
          value: "/output/WORKING/data/en/event/'ltf_txt'"
        - name: framenet_path
          value: "/output/WORKING/data/en/event/'framenet_res'"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: ltf_txt_path_ru
          value: "/output/WORKING/data/ru/event/'ltf_txt'"
        - name: framenet_path_ru
          value: "/output/WORKING/data/ru/event/'framenet_res'"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: ltf_txt_path_es
          value: "/output/WORKING/data/es/event/'ltf_txt'"
        - name: framenet_path_es
          value: "/output/WORKING/data/es/event/'framenet_res'"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START process-framenet-generate **";
            mkdir -p /output/WORKING/data/en/event;
            mkdir -p /output/WORKING/data/ru/event;
            mkdir -p /output/WORKING/data/es/event;
            echo `date` - "START Process Framenet Generate";
            /opt/conda/envs/py36/bin/python /event/aida_event/framenet/generate_framenet.py ${lang} ${ltf_source} ${ltf_txt_path} ${framenet_path} &
            /opt/conda/envs/py36/bin/python /event/aida_event/framenet/generate_framenet.py ${lang_ru} ${ltf_source_ru} ${ltf_txt_path_ru} ${framenet_path_ru} &
            /opt/conda/envs/py36/bin/python /event/aida_event/framenet/generate_framenet.py ${lang_es} ${ltf_source_es} ${ltf_txt_path_es} ${framenet_path_es} &
            wait;
            echo `date` - "END Process Framenet Generate";

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true
          - name: output-efs
            mountPath: "/output"

################################
## run-semafor
################################
      - name: run-semafor
        image: limanling/aida-tools
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: ltf_txt_path
          value: "/output/WORKING/data/en/event/'ltf_txt'"
        - name: framenet_path
          value: "/output/WORKING/data/en/event/'framenet_res'"
        #RUSSIAN
        - name: ltf_txt_path_ru
          value: "/output/WORKING/data/ru/event/'ltf_txt'"
        - name: framenet_path_ru
          value: "/output/WORKING/data/ru/event/'framenet_res'"
        #SPANISH
        - name: ltf_txt_path_es
          value: "/output/WORKING/data/es/event/'ltf_txt'"
        - name: framenet_path_es
          value: "/output/WORKING/data/es/event/'framenet_res'"
        #ALL
        - name: thread_num
          value: "3"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "START Run Semafor";
            /semafor/bin/runSemafor_dir.sh ${ltf_txt_path} ${framenet_path} ${thread_num} &
            /semafor/bin/runSemafor_dir.sh ${ltf_txt_path_ru} ${framenet_path_ru} ${thread_num} &
            /semafor/bin/runSemafor_dir.sh ${ltf_txt_path_es} ${framenet_path_es} ${thread_num} &
            wait;
            echo `date` - "END Run Semafor";

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true
          - name: output-efs
            mountPath: "/output"

################################
## OneIE
################################
# docker run --rm -i -v ${data_root}:${data_root} -w /oneie --gpus '"device=1"' limteng/oneie_aida_m36 \
#     /opt/conda/bin/python \
#     /oneie/predict.py -i ${ltf_source} -o ${data_root} -l ${lang} --output_hidden
## this is from docker limteng/oneie_aida_m36

      - name: oneie
        image: limteng/oneie_aida_m36
        imagePullPolicy: IfNotPresent
# TODO DAN how do we run this on docker using '--gpus device=1'
        workingDir: /oneie
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: data_root
          value: "/output/WORKING/data/en"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: data_root_ru
          value: "/output/WORKING/data/ru"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: data_root_es
          value: "/output/WORKING/data/es"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START OneIE";
            /opt/conda/bin/python /oneie/predict.py -i ${ltf_source} -o ${data_root} -l {lang} --output_hidden &
            /opt/conda/bin/python /oneie/predict.py -i ${ltf_source_ru} -o ${data_root_ru} -l {lang_ru} --output_hidden &
            /opt/conda/bin/python /oneie/predict.py -i ${ltf_source_es} -o ${data_root_es} -l {lang_es} --output_hidden &
            wait;
            echo `date` - "END OneIE";
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true # Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## EDL edl-entity-extraction
################################
      - name: edl-entity-extraction
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
# TODO DAN how do we run this on docker using '--gpus device=1'
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: rsd_source
          value: "/output/WORKING/data/en/rsd"
        - name: edl_tab_nam_bio
          value: "/output/WORKING/data/en/merge/mention/english.nam.bio"
        - name: entity_fine_model
          value: "/output/WORKING/data/en/edl/merged_fine.tsv"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: rsd_source_ru
          value: "/output/WORKING/data/ru/rsd"
        - name: edl_tab_nam_bio_ru
          value: "/output/WORKING/data/ru/mention/russian.nam.bio”"
        - name: entity_fine_model_ru
          value: "/output/WORKING/data/ru/edl/merged_fine.tsv"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        - name: edl_tab_nam_bio_es
          value: “/output/WORKING/data/es/mention/spanish.nam.bio”
        - name: entity_fine_model_es
          value: "/output/WORKING/data/es/edl/merged_fine.tsv"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "START edl entity extraction";
            sed -i 's/0.0.0.0/aida-entity/' /entity/aida_edl/edl.py;
            /opt/conda/envs/py36/bin/python /entity/aida_edl/typing.py ${lang} ${edl_tab_nam_bio} ${entity_fine_model} &
            /opt/conda/envs/py36/bin/python /entity/aida_edl/typing.py ${lang_ru} ${edl_tab_nam_bio_ru} ${entity_fine_model_ru} &
            /opt/conda/envs/py36/bin/python /entity/aida_edl/typing.py ${lang_es} ${edl_tab_nam_bio_es} ${entity_fine_model_es} &
            wait;
            echo `date` - "END edl entity extraction";
            #modify /entity/aida_edl/edl.py - line 13 - url = 'http://0.0.0.0:5500/tagging' -> url = 'http://aida-entity:5500/tagging'
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## edl-linking
################################
      - name: edl-linking
        image: panx27/edl
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: source
          value: "" # no asr or ocr atm
        - name: edl_tab_nam_filename
          value: "/output/WORKING/data/en/merge/mention/en.nam.tagged.tab"
        - name: edl_tab_nom_filename
          value: "/output/WORKING/data/en/merge/mention/en.nom.tagged.tab"
        - name: edl_tab_pro_filename
          value: "/output/WORKING/data/en/merge/mention/en.pro.tagged.tab"
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: source_ru
          value: "" # no asr or ocr atm
        - name: edl_tab_nam_filename_ru
          value: "/output/WORKING/data/ru/mention/ru.nam.tagged.tab"
        - name: edl_tab_nom_filename_ru
          value: "/output/WORKING/data/ru/mention/ru.nom.tagged.tab"
        - name: edl_tab_pro_filename_ru
          value: "/output/WORKING/data/ru/mention/ru.pro.tagged.tab"
        - name: edl_output_dir_ru
          value: "/output/WORKING/data/ru/edl"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: source_es
          value: "" # no asr or ocr atm
        - name: edl_tab_nam_filename_es
          value: "/output/WORKING/data/es/mention/es.nam.tagged.tab"
        - name: edl_tab_nom_filename_es
          value: "/output/WORKING/data/es/mention/es.nom.tagged.tab"
        - name: edl_tab_pro_filename_es
          value: "/output/WORKING/data/es/mention/es.pro.tagged.tab"
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        command: ["/bin/bash", "-c"]
        args:
          # gonna symlink it here to avoid new volumes
          - echo `date` - "START edl linking";
            ln -s /output/WORKING/data/edl_data /data;
            ls -ahl /output/WORKING/data/;
            ls -ahl /output/WORKING/data/edl_data;
            ls -ahl /output/WORKING/data/es/;
            ls -ahl /output/WORKING/data/es/edl/;
            python ./projs/docker_aida19/aida19.py ${lang} ${edl_tab_nam_filename} ${edl_tab_nom_filename} ${edl_tab_pro_filename} ${edl_output_dir} m36 &
            python ./projs/docker_aida19/aida19.py ${lang_ru} ${edl_tab_nam_filename_ru} ${edl_tab_nom_filename_ru} ${edl_tab_pro_filename_ru} ${edl_output_dir_ru} m36 &
            python ./projs/docker_aida19/aida19.py ${lang_es} ${edl_tab_nam_filename_es} ${edl_tab_nom_filename_es} ${edl_tab_pro_filename_es} ${edl_output_dir_es} m36 &
            wait;
            echo `date` - "END edl linking";
          #NOTE: why is there a testdata_? Was this just part of a testing script?
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## ENGLISH edl-nominal-coreference
################################

## 2020=09-21 edl-nominal-coreference entirely rewritten to be:
# docker run --gpus '"device=1"' --rm -v ${data_root}:${data_root} laituan245/spanbert_entity_coref \
# -edl_official ${edl_tab_link} -edl_freebase ${edl_tab_link_fb} -l ${ltf_source} -o ${edl_tab_final}
# ENTRYPOINT: "/opt/conda/envs/aida_coreference/bin/python3.6\" \"aida_coref.py\"]
# command: ["/opt/conda/envs/aida_coreference/bin/python3.6", "/app/aida_coref.py"
# TODO: not sure how to set --gpus device=1 or how to mount data_root:data_root
      - name: edl-nominal-coreference-en
        image: laituan245/spanbert_entity_coref
#        workingDir: /app
# NOTE: Not sure what the workdingDir should be, but needs to run aida_coref.py
        imagePullPolicy: IfNotPresent
        env:
        - name: data_root
          value: "/output/WORKING/data/en"
        - name: edl_tab_link
          value: "en.linking.tab"
        - name: edl_tab_link_fb
          value: "en.linking.freebase.tab"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "START edl-nominal-coreference-en";
            echo "Begin edl-nominal-coreference-en for "${edl_tab_link};
            ls -ahl ${data_root};
            /opt/conda/envs/aida_coreference/bin/python3.6 /app/aida_coref.py -edl_official ${edl_output_dir}/${edl_tab_link} -edl_freebase ${edl_output_dir}/${edl_tab_link_fb} -l ${data_root}/ltf -o ${edl_output_dir}/merged_final.tab;
            echo `date` - "END edl-nominal-coreference-en";

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)
# TODO DAN how do we run this on docker using '--gpus device=1', does the line above accomplish this?

################################
## ENGLISH tab2cs
################################
#Phi added 20200916, cant be a part of above anymore since it's a difference image now
      - name: tab2cs
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "START tab2cs";
            ls -ahl ${edl_output_dir};
            /opt/conda/envs/py36/bin/python /entity/aida_edl/tab2cs.py ${edl_output_dir}/merged_final.tab ${edl_output_dir}/merged.cs 'EDL';
            ls -ahl ${edl_output_dir};
            echo `date` - "END tab2cs";
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## RU/ES edl-nominal-conference-tabcs
################################
      - name: edl-nominal-conference-ru-es
        image: dylandilu/chuck_coreference
        workingDir: /scr
        imagePullPolicy: IfNotPresent
        env:
        - name: use_nominal_corefer
          value: "1"
        #RUSSIAN
        - name: udp_dir
          value: "/output/WORKING/data/ru/udp"
        - name: edl_tab_link
          value: "/output/WORKING/data/ru/edl/ru.linking.tab"
        - name: edl_tab_final
          value: "/output/WORKING/data/ru/edl/merged_final.tab"
        #SPANISH
        - name: udp_dir_es
          value: "/output/WORKING/data/es/udp"
        - name: edl_tab_link_es
          value: "/output/WORKING/data/es/edl/es.linking.tab"
        - name: edl_tab_final_es
          value: "/output/WORKING/data/es/edl/merged_final.tab"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "START edl-nominal-conference-ru-es";
            python appos_extract.py --udp_dir ${udp_dir} --edl_tab_path ${edl_tab_link} --path_out_coref ${edl_tab_final} &
            python appos_extract.py --udp_dir ${udp_dir_ru} --edl_tab_path ${edl_tab_link_ru} --path_out_coref ${edl_tab_final_ru} &
            python appos_extract.py --udp_dir ${udp_dir_es} --edl_tab_path ${edl_tab_link_es} --path_out_coref ${edl_tab_final_es} &
            wait;
            echo `date` - "END edl-nominal-conference-ru-es";

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)
        #NOTE: merge_final.tab was updated, but there's no stdout for run

################################
##  tabcs
################################
      - name: tabcs
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        #RUSSIAN
        - name: edl_output_dir_ru
          value: "/output/WORKING/data/ru/edl"
        #SPANISH
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"

        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "START tabcs";
            /opt/conda/envs/py36/bin/python /entity/aida_edl/tab2cs.py ${edl_output_dir}/merged_final.tab ${edl_output_dir}/merged.cs 'EDL' &
            /opt/conda/envs/py36/bin/python /entity/aida_edl/tab2cs.py ${edl_output_dir_ru}/merged_final.tab ${edl_output_dir_ru}/merged.cs 'EDL' &
            /opt/conda/envs/py36/bin/python /entity/aida_edl/tab2cs.py ${edl_output_dir_es}/merged_final.tab ${edl_output_dir_es}/merged.cs 'EDL' &
            wait;
            echo `date` - "END tabcs";

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Rewrite Relation and Event of OneIE system
################################
# new for oneie, and the command is:
# docker run --rm -v ${data_root}:${data_root} -v ${data_root}:${data_root} -w `pwd`  -i limanling/uiuc_ie_m36 \
#     /opt/conda/envs/py36/bin/python \
#     /aida_utilities/rewrite_entity_id.py \
#     ${edl_cs_oneie} ${relation_cs_oneie} ${event_coarse_oneie} ${edl_cs_coarse} \
#     ${relation_cs_coarse} ${event_coarse_without_time}
# # for all three languages

      - name: rewrite-relation-event-oneie
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: data_root
          value: "/output/WORKING/data/en"
        #RUSSIAN
        - name: data_root_ru
          value: "/output/WORKING/data/ru"
        #SPANISH
        - name: data_root_es
          value: "/output/WORKING/data/es"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "START rewrite relation event OneIE";
            /opt/conda/envs/py36/bin/python /aida_utilities/rewrite_entity_id.py ${data_root}/merge/cs/entity.cs ${data_root}/merge/cs/relation.cs ${data_root}/merge/cs/event.cs ${data_root}/edl/merged.cs ${data_root}/relation/en.rel.cs ${data_root}/event/event_rewrite.cs &
            /opt/conda/envs/py36/bin/python /aida_utilities/rewrite_entity_id.py ${data_root_es}/cs/entity.cs ${data_root_es}/cs/relation.cs ${data_root_es}/cs/event.cs ${data_root_es}/edl/merged.cs ${data_root_es}/relation/es.rel.cs ${data_root_es}/event/event_rewrite.cs &
            /opt/conda/envs/py36/bin/python /aida_utilities/rewrite_entity_id.py ${data_root_ru}/cs/entity.cs ${data_root_ru}/cs/relation.cs ${data_root_ru}/cs/event.cs ${data_root_ru}/edl/merged.cs ${data_root_ru}/relation/ru.rel.cs ${data_root_ru}/event/event_rewrite.cs &
            wait;
            echo `date` - "END rewrite relation event OneIE";

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true # Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" # Please put your output here (WORKING, INTER-TA, NIST)

################################
## Filler Extraction & new relation
################################

      - name: filler-extract-new-relation
        image: dylandilu/filler
        imagePullPolicy: IfNotPresent
        workingDir: /scr
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: core_nlp_output_path
          value: "/output/WORKING/data/en/corenlp"
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: rsd_source
          value: "/output/WORKING/data/en/rsd"
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        - name: new_relation_coarse
          value: "/output/WORKING/data/en/relation/new_relation_en.cs"
        - name: filler_coarse
          value: "/output/WORKING/data/en/edl/filler_en.cs"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: core_nlp_output_path_ru
          value: "/output/WORKING/data/ru/corenlp"
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: rsd_source_ru
          value: "/output/WORKING/data/ru/rsd"
        - name: edl_output_dir_ru
          value: "/output/WORKING/data/ru/edl"
        - name: new_relation_coarse_ru
          value: "/output/WORKING/data/ru/relation/new_relation_ru.cs"
        - name: filler_coarse_ru
          value: "/output/WORKING/data/ru/edl/filler_ru.cs"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: core_nlp_output_path_es
          value: "/output/WORKING/data/es/corenlp"
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        - name: new_relation_coarse_es
          value: "/output/WORKING/data/es/relation/new_relation_es.cs"
        - name: filler_coarse_es
          value: "/output/WORKING/data/es/edl/filler_es.cs"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "START filler extraction and new relation";
            python extract_filler_relation.py --corenlp_dir ${core_nlp_output_path} --ltf_dir ${ltf_source} --edl_path ${edl_output_dir}/merged.cs --text_dir ${rsd_source}
            --path_relation ${new_relation_coarse} --path_filler ${filler_coarse} --lang ${lang} &

            python extract_filler_relation.py --corenlp_dir ${core_nlp_output_path_ru} --ltf_dir ${ltf_source_ru} --edl_path ${edl_output_dir_ru}/merged.cs --text_dir ${rsd_source_ru}
            --path_relation ${new_relation_coarse_ru} --path_filler ${filler_coarse_ru} --lang ${lang_ru} &

            python extract_filler_relation.py --corenlp_dir ${core_nlp_output_path_es} --ltf_dir ${ltf_source_es} --edl_path ${edl_output_dir_es}/merged.cs --text_dir ${rsd_source_es}
            --path_relation ${new_relation_coarse_es} --path_filler ${filler_coarse_es} --lang ${lang_es} &

            wait;
            echo `date` - "END filler extraction and new relations";

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Fine-grained entity typing
################################
      - name: fine-grained-entity
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: rsd_source
          value: "/output/WORKING/data/en/rsd"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: edl_output_dir_ru
          value: "/output/WORKING/data/ru/edl"
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: rsd_source_ru
          value: "/output/WORKING/data/ru/rsd"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "START fine grained entity typing";
            /opt/conda/envs/py36/bin/python /entity/aida_edl/fine_grained_entity.py ${lang} ${edl_output_dir}/${lang}.linking.freebase.fine.json ${edl_output_dir}/${lang}.linking.freebase.tab
            ${edl_output_dir}/merged_fine.tsv ${edl_output_dir}/${lang}.linking.geo.json ${edl_output_dir}/merged.cs ${edl_output_dir}/merged_fine.cs ${edl_output_dir}/filler_fine.cs
            --filler_coarse ${edl_output_dir}/filler_${lang}.cs --ground_truth_tab_dir ${edl_output_dir}/ldc_anno_matched --ltf_dir ${ltf_source} --rsd_dir ${rsd_source} --eval m36 &

            /opt/conda/envs/py36/bin/python /entity/aida_edl/fine_grained_entity.py ${lang_ru} ${edl_output_dir_ru}/${lang_ru}.linking.freebase.fine.json ${edl_output_dir_ru}/${lang_ru}.linking.freebase.tab
            ${edl_output_dir_ru}/merged_fine.tsv ${edl_output_dir_ru}/${lang_ru}.linking.geo.json ${edl_output_dir_ru}/merged.cs ${edl_output_dir_ru}/merged_fine.cs ${edl_output_dir_ru}/filler_fine.cs
            --filler_coarse ${edl_output_dir_ru}/filler_${lang_ru}.cs --ground_truth_tab_dir ${edl_output_dir_ru}/ldc_anno_matched --ltf_dir ${ltf_source_ru} --rsd_dir ${rsd_source_ru} --eval m36 &

            /opt/conda/envs/py36/bin/python /entity/aida_edl/fine_grained_entity.py ${lang_es} ${edl_output_dir_es}/${lang_es}.linking.freebase.fine.json ${edl_output_dir_es}/${lang_es}.linking.freebase.tab
            ${edl_output_dir_es}/merged_fine.tsv ${edl_output_dir_es}/${lang_es}.linking.geo.json ${edl_output_dir_es}/merged.cs ${edl_output_dir_es}/merged_fine.cs ${edl_output_dir_es}/filler_fine.cs
            --filler_coarse ${edl_output_dir_es}/filler_${lang_es}.cs --ground_truth_tab_dir ${edl_output_dir_es}/ldc_anno_matched --ltf_dir ${ltf_source_es} --rsd_dir ${rsd_source_es} --eval m36 &

            wait;
            echo `date` - "Completed fine_grained_entity.py";

            /opt/conda/envs/py36/bin/python /relation/FineRelationExtraction/utils/color_fillers.py --en_color_fill_tab_fname ${edl_output_dir}/${lang}.linking.col.tab
            --en_fill_cs_fname ${edl_output_dir}/filler_${lang}.cs --en_combo_outfname ${edl_output_dir}/filler_${lang}_all.cs --en_color_outfname ${edl_output_dir}/${lang}.color.cs &

            /opt/conda/envs/py36/bin/python /relation/FineRelationExtraction/utils/color_fillers.py --en_color_fill_tab_fname ${edl_output_dir_ru}/${lang_ru}.linking.col.tab
            --en_fill_cs_fname ${edl_output_dir_ru}/filler_${lang_ru}.cs --en_combo_outfname ${edl_output_dir_ru}/filler_${lang_ru}_all.cs --en_color_outfname ${edl_output_dir_ru}/${lang_ru}.color.cs &

            /opt/conda/envs/py36/bin/python /relation/FineRelationExtraction/utils/color_fillers.py --en_color_fill_tab_fname ${edl_output_dir_es}/${lang_es}.linking.col.tab
            --en_fill_cs_fname ${edl_output_dir_ru}/filler_${lang_es}.cs --en_combo_outfname ${edl_output_dir_es}/filler_${lang_es}_all.cs --en_color_outfname ${edl_output_dir_es}/${lang_es}.color.cs &

            wait;
            echo `date` - "Completed color_fillers.py";

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## extracting events - add time arguments
################################

#      - name: extracting-events-time-args
#        image: limanling/uiuc_ie_m36
#        imagePullPolicy: IfNotPresent
#        env:
        #ENGLISH
#        - name: lang
#          value: "en"
#        - name: edl_output_dir
#          value: "/output/WORKING/data/en/edl"
#        - name: ltf_source
#          value: "/output/WORKING/data/en/ltf"
#        - name: rsd_source
#          value: "/output/WORKING/data/en/rsd"
#        - name: event_result_dir
#          value: "/output/WORKING/data/en/event"
        #RUSSIAN
#        - name: lang_ru
#          value: "ru"
#        - name: edl_output_dir_ru
#          value: "/output/WORKING/data/ru/edl"
#        - name: ltf_source_ru
#          value: "/output/WORKING/data/ru/ltf"
#        - name: rsd_source_ru
#          value: "/output/WORKING/data/ru/rsd"
#        - name: event_result_dir_ru
#          value: "/output/WORKING/data/ru/event"
        #UKRANIAN
#        - name: lang_uk
#          value: "uk"
#        - name: edl_output_dir_uk
#          value: "/output/WORKING/data/uk/edl"
#        - name: ltf_source_uk
#          value: "/output/WORKING/data/uk/ltf"
#        - name: rsd_source_uk
#          value: "/output/WORKING/data/uk/rsd"
#        - name: event_result_dir_uk
#          value: "/output/WORKING/data/uk/event"  TODO: ADD SPANISH
#        command: ["/bin/bash", "-c"]
#        args:
#          - /opt/conda/envs/py36/bin/python /event/aida_event/postprocessing_add_time_expression.py ${ltf_source} ${edl_output_dir}/filler_${lang}.cs ${event_result_dir}/en.event.cs ${event_result_dir}/events_tme.cs &
#            /opt/conda/envs/py36/bin/python /event/aida_event/postprocessing_add_time_expression.py ${ltf_source_ru} ${edl_output_dir_ru}/filler_${lang_ru}.cs ${event_result_dir_ru}/ru.events.cs ${event_result_dir_ru}/events_tme.cs &
#            /opt/conda/envs/py36/bin/python /event/aida_event/postprocessing_add_time_expression.py ${ltf_source_uk} ${edl_output_dir_uk}/filler_${lang_uk}.cs ${event_result_dir_uk}/uk.events.cs ${event_result_dir_uk}/events_tme.cs &
#            wait;
#            echo `date` - "Completed extracting-events-time-args"
#        volumeMounts:
#          - name: input-efs
#            mountPath: "/input"
#            readOnly: true #Input Volume for worker will be set to readOnly
#          - name: output-efs
#            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)


################################
## Relation Extraction (fine)
################################

      - name: relation-extraction-fine-part1
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        - name: source
          value: "" # no asr or ocr atm
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: rsd_source
          value: "/output/WORKING/data/en/rsd"
        - name: event_result_dir
          value: "/output/WORKING/data/en/event"
        - name: relation_result_dir
          value: "/output/WORKING/data/en/relation"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: edl_output_dir_ru
          value: "/output/WORKING/data/ru/edl"
        - name: source_ru
          value: "" # no asr or ocr atm
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: rsd_source_ru
          value: "/output/WORKING/data/ru/rsd"
        - name: event_result_dir_ru
          value: "/output/WORKING/data/ru/event"
        - name: relation_result_dir_ru
          value: "/output/WORKING/data/ru/relation"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        - name: source_es
          value: "" # no asr or ocr atm
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        - name: event_result_dir_es
          value: "/output/WORKING/data/es/event"
        - name: relation_result_dir_es
          value: "/output/WORKING/data/es/relation"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "START relation extraction fine (Part 1)";
            /opt/conda/envs/py36/bin/python -u /relation/FineRelationExtraction/EVALfine_grained_relations.py
            --lang_id ${lang} --ltf_dir ${ltf_source} --rsd_dir ${rsd_source} --cs_fnames ${edl_output_dir}/merged.cs ${edl_output_dir}/filler_${lang}_all.cs ${relation_result_dir}/${lang}.rel.cs ${relation_result_dir}/new_relation_${lang}.cs
            ${event_result_dir}/event_rewrite.cs --fine_ent_type_tab ${edl_output_dir}/${lang}.linking.freebase.tab --fine_ent_type_json
            ${edl_output_dir}/${lang}.linking.freebase.fine.json --outdir ${relation_result_dir} --fine_grained;

            /opt/conda/envs/py36/bin/python -u /relation/FineRelationExtraction/EVALfine_grained_relations.py
            --lang_id ${lang_ru} --ltf_dir ${ltf_source_ru} --rsd_dir ${rsd_source_ru} --cs_fnames ${edl_output_dir_ru}/merged.cs ${edl_output_dir_ru}/filler_${lang_ru}_all.cs ${relation_result_dir_ru}/${lang_ru}.rel.cs ${relation_result_dir_ru}/new_relation_${lang_ru}.cs
            ${event_result_dir_ru}/event_rewrite.cs --fine_ent_type_tab ${edl_output_dir_ru}/${lang_ru}.linking.freebase.tab --fine_ent_type_json
            ${edl_output_dir_ru}/${lang_ru}.linking.freebase.fine.json --outdir ${relation_result_dir_ru} --fine_grained;

            /opt/conda/envs/py36/bin/python -u /relation_spa/FineRelationExtraction/EVALfine_grained_relations.py
            --lang_id ${lang_es} --ltf_dir ${ltf_source_es} --rsd_dir ${rsd_source_es} --cs_fnames ${edl_output_dir_es}/merged.cs ${edl_output_dir_es}/filler_${lang_es}_all.cs ${relation_result_dir_es}/${lang_es}.rel.cs ${relation_result_dir_es}/new_relation_${lang_es}.cs
            ${event_result_dir_es}/event_rewrite.cs  --fine_ent_type_tab ${edl_output_dir_es}/${lang_es}.linking.freebase.tab --fine_ent_type_json ${edl_output_dir_es}/${lang_es}.linking.freebase.fine.json
            --outdir ${relation_result_dir_es} --fine_grained;

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

      - name: relation-extraction_event_time
        image: wenhycs/uiuc_event_time
        imagePullPolicy: IfNotPresent
        workingDir: /EventTimeArg
        env:
        - name: parent_child_tab_path
          value: "/input/docs/parent_children.tab"
        #ENGLISH
        - name: lang
          value: "en"
        - name: relation_result_dir
          value: "/output/WORKING/data/en/relation"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: relation_result_dir_ru
          value: "/output/WORKING/data/ru/relation"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: relation_result_dir_es
          value: "/output/WORKING/data/es/relation"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "START aida_event_time_pipeline";
            python aida_event_time_pipeline.py --relation_cold_start_filename ${relation_result_dir}/${lang}/${lang}.fine_rel.cs --relation --parent_children_filename ${parent_child_tab_path} --output_filename ${relation_result_dir}/${lang}/${lang}_rel_4tuple.cs;
            python aida_event_time_pipeline.py --relation_cold_start_filename ${relation_result_dir_ru}/${lang_ru}/${lang_ru}.fine_rel.cs --relation --parent_children_filename ${parent_child_tab_path} --output_filename ${relation_result_dir_ru}/${lang_ru}/${lang_ru}_rel_4tuple.cs;
            python aida_event_time_pipeline.py --relation_cold_start_filename ${relation_result_dir_es}/${lang_es}/${lang_es}.fine_rel.cs --relation --parent_children_filename ${parent_child_tab_path} --output_filename ${relation_result_dir_es}/${lang_es}/${lang_es}_rel_4tuple.cs;
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)


      - name: relation-extraction-fine-part2
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        - name: source
          value: "" # no asr or ocr atm
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: rsd_source
          value: "/output/WORKING/data/en/rsd"
        - name: event_result_dir
          value: "/output/WORKING/data/en/event"
        - name: relation_result_dir
          value: "/output/WORKING/data/en/relation"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: edl_output_dir_ru
          value: "/output/WORKING/data/ru/edl"
        - name: source_ru
          value: "" # no asr or ocr atm
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: rsd_source_ru
          value: "/output/WORKING/data/ru/rsd"
        - name: event_result_dir_ru
          value: "/output/WORKING/data/ru/event"
        - name: relation_result_dir_ru
          value: "/output/WORKING/data/ru/relation"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        - name: source_es
          value: "" # no asr or ocr atm
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        - name: event_result_dir_es
          value: "/output/WORKING/data/es/event"
        - name: relation_result_dir_es
          value: "/output/WORKING/data/es/relation"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "START relation extraction fine (Part 2)";

            echo `date` - "english";
            /opt/conda/envs/py36/bin/python /aida_utilities/pipeline_merge_m18.py --cs_fnames ${edl_output_dir}/merged_fine.cs ${edl_output_dir}/filler_fine.cs --output_file ${edl_output_dir}/merged_all_fine.cs;
            echo `date` - "add protester";
            /opt/conda/envs/py36/bin/python /entity/aida_edl/add_protester.py ${event_result_dir}/event_rewrite.cs ${edl_output_dir}/merged_all_fine.cs ${edl_output_dir}/merged_all_fine_protester.cs;

            echo `date` - "russian";
            /opt/conda/envs/py36/bin/python /aida_utilities/pipeline_merge_m18.py --cs_fnames ${edl_output_dir_ru}/merged_fine.cs ${edl_output_dir_ru}/filler_fine.cs --output_file ${edl_output_dir_ru}/merged_all_fine.cs;
            echo `date` - "add protester RU";
            /opt/conda/envs/py36/bin/python /entity/aida_edl/add_protester.py ${event_result_dir_ru}/event_rewrite.css ${edl_output_dir_ru}/merged_all_fine.cs ${edl_output_dir_ru}/merged_all_fine_protester.cs;
            echo `date` - "** Informative Justification ** RU";
            /opt/conda/envs/py36/bin/python /entity/aida_edl/entity_informative.py ${edl_output_dir_ru}/chunk.txt ${edl_output_dir_ru}/merged_all_fine_protester.cs ${edl_output_dir_ru}/merged_all_fine_info.cs;

            echo `date` - "spanish";
            /opt/conda/envs/py36/bin/python /aida_utilities/pipeline_merge_m18.py --cs_fnames ${edl_output_dir_es}/merged_fine.cs ${edl_output_dir_es}/filler_fine.cs --output_file ${edl_output_dir_es}/merged_all_fine.cs;
            echo `date` - "add protester ES";
            /opt/conda/envs/py36/bin/python /entity/aida_edl/add_protester.py ${event_result_dir_es}/event_rewrite.css ${edl_output_dir_es}/merged_all_fine.cs ${edl_output_dir_es}/merged_all_fine_protester.cs;

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)


      - name: informative-justification
        image: panx27/aida20_mention
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        - name: source
          value: "" # no asr or ocr atm
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: rsd_source
          value: "/output/WORKING/data/en/rsd"
        - name: event_result_dir
          value: "/output/WORKING/data/en/event"
        - name: relation_result_dir
          value: "/output/WORKING/data/en/relation"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: edl_output_dir_ru
          value: "/output/WORKING/data/ru/edl"
        - name: source_ru
          value: "" # no asr or ocr atm
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: rsd_source_ru
          value: "/output/WORKING/data/ru/rsd"
        - name: event_result_dir_ru
          value: "/output/WORKING/data/ru/event"
        - name: relation_result_dir_ru
          value: "/output/WORKING/data/ru/relation"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        - name: source_es
          value: "" # no asr or ocr atm
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        - name: event_result_dir_es
          value: "/output/WORKING/data/es/event"
        - name: relation_result_dir_es
          value: "/output/WORKING/data/es/relation"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "START Informative Justification";
            python ./extend.py ${lang} ${ltf_source} ${edl_output_dir}/merged_all_fine_protester.cs ${edl_output_dir}/merged_all_fine_info.cs_tmp;
            python ./revise.py ${edl_output_dir}/merged_all_fine_info.cs_tmp ${edl_output_dir}/merged_all_fine_info.cs;

            python ./extend.py ${lang_ru} ${ltf_source_ru} ${edl_output_dir_ru}/merged_all_fine_protester.cs ${edl_output_dir_ru}/merged_all_fine_info.cs;
            python ./extend.py ${lang_es} ${ltf_source_es} ${edl_output_dir_es}/merged_all_fine_protester.cs ${edl_output_dir_es}/merged_all_fine_info.cs;
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

      - name: relation-extraction-fine-part3
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        - name: source
          value: "" # no asr or ocr atm
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: rsd_source
          value: "/output/WORKING/data/en/rsd"
        - name: event_result_dir
          value: "/output/WORKING/data/en/event"
        - name: relation_result_dir
          value: "/output/WORKING/data/en/relation"
        - name: edl_tab_nam
          value: "en.nam.tagged.tab"
        - name: edl_tab_nom
          value: "en.nom.tagged.tab"
        - name: edl_tab_pro
          value: "en.pro.tagged.tab"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: edl_output_dir_ru
          value: "/output/WORKING/data/ru/edl"
        - name: source_ru
          value: "" # no asr or ocr atm
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: rsd_source_ru
          value: "/output/WORKING/data/ru/rsd"
        - name: event_result_dir_ru
          value: "/output/WORKING/data/ru/event"
        - name: relation_result_dir_ru
          value: "/output/WORKING/data/ru/relation"
        - name: edl_tab_nam_ru
          value: "ru.nam.tagged.tab"
        - name: edl_tab_nom_ru
          value: "ru.nom.tagged.tab"
        - name: edl_tab_pro_ru
          value: "ru.pro.tagged.tab"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        - name: source_es
          value: "" # no asr or ocr atm
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        - name: event_result_dir_es
          value: "/output/WORKING/data/es/event"
        - name: relation_result_dir_es
          value: "/output/WORKING/data/es/relation"
        - name: edl_tab_nam_es
          value: "es.nam.tagged.tab"
        - name: edl_tab_nom_es
          value: "es.nom.tagged.tab"
        - name: edl_tab_pro_es
          value: "es.pro.tagged.tab"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "START relation extraction fine (Part 3)";

            /opt/conda/envs/py36/bin/python /aida_utilities/rewrite_mention_confidence.py ${lang}${source} ${edl_output_dir}/${edl_tab_nam} ${edl_output_dir}/${edl_tab_nom}
            ${edl_output_dir}/${edl_tab_pro} ${edl_output_dir}/${lang}.linking.tab ${edl_output_dir}/${lang}.linking.tab.candidates.json ${ltf_source} ${edl_output_dir}/merged_all_fine_info.cs
            ${edl_output_dir}/merged_all_fine_info_conf.cs ${edl_output_dir}/all_conf.txt;
            echo `date` - "Completed rewrite_mention_confidence.py";

            /opt/conda/envs/py36/bin/python /aida_utilities/rewrite_mention_confidence.py ${lang_ru}${source_ru} ${edl_output_dir_ru}/${edl_tab_nam_ru} ${edl_output_dir_ru}/${edl_tab_nom_ru}
            ${edl_output_dir_ru}/${edl_tab_pro_ru} ${edl_output_dir_ru}/${lang_ru}.linking.tab ${edl_output_dir_ru}/${lang_ru}.linking.tab.candidates.json ${ltf_source_ru} ${edl_output_dir_ru}/merged_all_fine_info.cs
            ${edl_output_dir_ru}/merged_all_fine_info_conf.cs ${edl_output_dir_ru}/all_conf.txt;
            echo `date` - "Completed rewrite_mention_confidence.py RU";

            /opt/conda/envs/py36/bin/python /aida_utilities/rewrite_mention_confidence.py ${lang_es}${source_es} ${edl_output_dir_es}/${edl_tab_nam_es} ${edl_output_dir_es}/${edl_tab_nom_es}
            ${edl_output_dir_es}/${edl_tab_pro_ru} ${edl_output_dir_es}/${lang_es}.linking.tab ${edl_output_dir_es}/${lang_es}.linking.tab.candidates.json ${ltf_source_es} ${edl_output_dir_es}/merged_all_fine_info.cs
            ${edl_output_dir_es}/merged_all_fine_info_conf.cs ${edl_output_dir_es}/all_conf.txt;
            echo `date` - "Completed rewrite_mention_confidence.py ES";

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)


#TODO: DAN all of the above --gpus device=1

################################
## EN - Event (Fine-grained)
################################
      - name: event-fine
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: rsd_source
          value: "/output/WORKING/data/en/rsd"
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        - name: event_result_dir
          value: "/output/WORKING/data/en/event"
        - name: core_nlp_output_path
          value: "/output/WORKING/data/en/corenlp"
        #RUSSIAN
        #UKRANIAN
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "START event fine grained";
            /opt/conda/envs/py36/bin/python /event/aida_event/fine_grained/fine_grained_events.py
            ${lang} ${ltf_source} ${edl_output_dir}/${lang}.linking.freebase.fine.json ${edl_output_dir}/${lang}.linking.freebase.tab ${edl_output_dir}/merged.cs
            ${event_result_dir}/en.event.cs ${event_result_dir}/events_fine.cs --filler_coarse ${edl_output_dir}/filler_${lang}.cs --entity_finegrain_aida ${edl_output_dir}/merged_all_fine.cs;
            echo `date` - "** Event fine-grained typing **";
            echo "** Event rule-based **"

            /opt/conda/envs/py36/bin/python /event/aida_event/framenet/new_event_framenet.py
            "${event_result_dir}/'framenet_res'" ${ltf_source} ${rsd_source} ${edl_output_dir}/merged.cs ${edl_output_dir}/filler_${lang}.cs ${event_result_dir}/events_fine.cs ${event_result_dir}/events_fine_framenet.cs;
            echo `date` - "Completed new_event_framenet.py";
            /opt/conda/envs/py36/bin/python /event/aida_event/framenet/new_event_dependency.py
            ${rsd_source} ${core_nlp_output_path} ${edl_output_dir}/merged.cs ${edl_output_dir}/filler_${lang}.cs ${event_result_dir}/events_fine.cs ${event_result_dir}/events_fine_framenet.cs ${event_result_dir}/events_fine_depen.cs;
            echo `date` - "Completed new_event_dependency.py";

            /opt/conda/envs/py36/bin/python /aida_utilities/pipeline_merge_m18.py
            --cs_fnames ${event_result_dir}/events_fine.cs ${event_result_dir}/events_fine_framenet.cs ${event_result_dir}/events_fine_depen.cs --output_file ${event_result_dir}/events_fine_all.cs;
            echo `date` - "Combine fine-grained typing and rule-based";
            /opt/conda/envs/py36/bin/python /event/aida_event/fine_grained/rewrite_args.py
            ${event_result_dir}/events_fine_all.cs ${ltf_source} ${event_result_dir}/events_fine_all_clean.cs_tmp ${lang};

            /opt/conda/envs/py36/bin/python /event/aida_event/fine_grained/rewrite_args.py
            ${event_result_dir}/events_fine_all_clean.cs_tmp ${ltf_source} ${event_result_dir}/events_fine_all_clean.cs ${lang};
            echo `date` - "Completed rewrite-args";

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## RU\UK - Event (Fine-grained)
################################
      - name: event-fine-ru-es
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: edl_output_dir_ru
          value: "/output/WORKING/data/ru/edl"
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: rsd_source_ru
          value: "/output/WORKING/data/ru/rsd"
        - name: event_result_dir_ru
          value: "/output/WORKING/data/ru/event"
        - name: core_nlp_output_path_ru
          value: "/output/WORKING/data/ru/corenlp"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        - name: event_result_dir_es
          value: "/output/WORKING/data/es/event"
        - name: core_nlp_output_path_es
          value: "/output/WORKING/data/es/corenlp"
        - name: log_filename
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START Event Fine Grained RU ES" &>> ${log_filename};
            /opt/conda/envs/py36/bin/python /event/aida_event/fine_grained/fine_grained_events.py
            ${lang_ru} ${ltf_source_ru} ${edl_output_dir_ru}/${lang_ru}.linking.freebase.fine.json ${edl_output_dir_ru}/${lang_ru}.linking.freebase.tab ${edl_output_dir_ru}/merged.cs
            ${event_result_dir_ru}/en.event.cs ${event_result_dir_ru}/events_fine.cs --filler_coarse ${edl_output_dir_ru}/filler_${lang_ru}.cs --entity_finegrain_aida ${edl_output_dir_ru}/merged_all_fine.cs;
            echo `date` - "** Event fine-grained typing RU**";
            echo "** Event rule-based RU**"

            /opt/conda/envs/py36/bin/python /event/aida_event/fine_grained/rewrite_args.py
            ${event_result_dir_ru}/events_fine.cs ${ltf_source_ru} ${event_result_dir_ru}/events_fine_all_clean.cs_tmp ${lang_ru};

            /opt/conda/envs/py36/bin/python /event/aida_event/fine_grained/rewrite_args.py
            ${event_result_dir_ru}/events_fine_all_clean.cs_tmp ${ltf_source_ru} ${event_result_dir_ru}/events_fine_all_clean.cs ${lang_ru};
            echo `date` - "Completed rewrite-args RU";

            /opt/conda/envs/py36/bin/python /event/aida_event/fine_grained/fine_grained_events.py
            ${lang_es} ${ltf_source_es} ${edl_output_dir_es}/${lang_es}.linking.freebase.fine.json ${edl_output_dir_es}/${lang_es}.linking.freebase.tab ${edl_output_dir_es}/merged.cs
            ${event_result_dir_es}/en.event.cs ${event_result_dir_es}/events_fine.cs --filler_coarse ${edl_output_dir_es}/filler_${lang_es}.cs --entity_finegrain_aida ${edl_output_dir_es}/merged_all_fine.cs;
            echo `date` - "** Event fine-grained typing ES**";
            echo "** Event rule-based ES**"

            /opt/conda/envs/py36/bin/python /event/aida_event/fine_grained/rewrite_args.py
            ${event_result_dir_es}/events_fine.cs ${ltf_source_es} ${event_result_dir_es}/events_fine_all_clean.cs_tmp ${lang_es};

            /opt/conda/envs/py36/bin/python /event/aida_event/fine_grained/rewrite_args.py
            ${event_result_dir_es}/events_fine_all_clean.cs_tmp ${ltf_source_es} ${event_result_dir_es}/events_fine_all_clean.cs ${lang_es};
            echo `date` - "Completed rewrite-args ES";

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Event coreference
################################

## NOTE: Event coreference completely changed 2020-09-21
# docker run --rm -v ${data_root}:${data_root} --gpus '"device=1"' laituan245/spanbert_coref \
# -i ${event_fine_all_clean} -c ${event_corefer} -t ${event_corefer_confidence} -l ${ltf_source}
#             "Entrypoint": [
#                "/opt/conda/envs/aida_coreference/bin/python3.6",
#                "aida_event_coref.py"
# TODO: not sure how to:  -v ${data_root}:${data_root} --gpus '"device=1"'
# event_result_dir=${data_root}/event
# event_fine_all_clean=${event_result_dir}/events_fine_all_clean.cs
# event_corefer=${event_result_dir}/events_corefer.cs
# event_corefer_confidence=${event_result_dir}/events_corefer_confidence.tab

      - name: event-coreference
        image: laituan245/spanbert_coref
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: event_fine_all_clean
          value: "events_fine_all_clean.cs"
        - name: event_corefer
          value: "events_corefer.cs"
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: event_result_dir
          value: "/output/WORKING/data/en/event"
        - name: event_corefer_confidence
          value: "events_corefer_confidence.tab"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: rsd_source_ru
          value: "/output/WORKING/data/ru/rsd"
        - name: event_result_dir_ru
          value: "/output/WORKING/data/ru/event"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        - name: event_result_dir_es
          value: "/output/WORKING/data/es/event"
        - name: log_filename
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START Event Coreference" &>> ${log_filename};
            /opt/conda/envs/aida_coreference/bin/python3.6 aida_event_coref.py
            -i ${event_result_dir}/${event_fine_all_clean} -c ${event_result_dir}/${event_corefer}
            -t ${event_result_dir}/${event_corefer_confidence} -l ${ltf_source}
            &>> ${log_filename};
            echo `date` - "END Event Coreference" &>> ${log_filename};

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Temporal 4 tuple generation
################################
# en
# docker run -i --rm -v ${data_root}:${data_root} \
#     -v ${parent_child_tab_path}:${parent_child_tab_path} \
#     -w /EventTimeArg --gpus '"device=1"' wenhycs/uiuc_event_time \
#     python aida_event_time_pipeline.py \
#     --time_cold_start_filename ${filler_coarse} \
#     --event_cold_start_filename ${event_corefer} \
#     --read_cs_event \
#     --parent_children_filename ${parent_child_tab_path} \
#     --ltf_path ${ltf_source} \
#     --output_filename ${event_corefer_time} \
#     --use_dct_as_default \
#     --lang ${lang}
# # ru
# docker run -i --rm -v ${data_root}:${data_root} \
#     -v ${parent_child_tab_path}:${parent_child_tab_path} \
#     -w /EventTimeArg --gpus device=3 wenhycs/uiuc_event_time \
#     python aida_event_time_pipeline.py \
#     --time_cold_start_filename ${filler_coarse} \
#     --event_cold_start_filename ${event_corefer} \
#     --parent_children_filename ${parent_child_tab_path} \
#     --output_filename ${event_corefer_time} \
#     --lang ${lang}
# # es
# docker run -i --rm -v ${data_root}:${data_root} \
#     -v ${parent_child_tab_path}:${parent_child_tab_path} \
#     -w /EventTimeArg --gpus device=2 wenhycs/uiuc_event_time \
#     python aida_event_time_pipeline.py \
#     --time_cold_start_filename ${filler_coarse} \
#     --event_cold_start_filename ${event_corefer} \
#     --parent_children_filename ${parent_child_tab_path} \
#     --output_filename ${event_corefer_time} \
#     --lang ${lang}
      - name: temporal-4-tuple
        image: wenhycs/uiuc_event_time
        imagePullPolicy: IfNotPresent
# TODO DAN how do we run this on docker using '--gpus device=1'
        workingDir: /EventTimeArg
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: time_cold_start_filename
          value: "/output/WORKING/data/en/edl/filler_en.cs"
        - name: event_cold_start_filename
          value: "/output/WORKING/data/en/event/events_corefer.cs"
        - name: parent_child_tab_path
          value: "/input/docs/parent_children.tab"
        - name: ltf_path
          value: "/output/WORKING/data/en/ltf"
        - name: output_filename
          value: "/output/WORKING/data/en/event/events_4tuple.cs"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: time_cold_start_filename_ru
          value: "/output/WORKING/data/ru/edl/filler_ru.cs"
        - name: event_cold_start_filename_ru
          value: "/output/WORKING/data/ru/event/events_corefer.cs"
        - name: parent_child_tab_path_ru
          value: "/input/docs/parent_children.tab"
        - name: output_filename_ru
          value: "/output/WORKING/data/ru/event/events_4tuple.cs"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: time_cold_start_filename_es
          value: "/output/WORKING/data/es/edl/filler_es.cs"
        - name: event_cold_start_filename_es
          value: "/output/WORKING/data/es/event/events_corefer.cs"
        - name: parent_child_tab_path_es
          value: "/input/docs/parent_children.tab"
        - name: output_filename_es
          value: "/output/WORKING/data/es/event/events_4tuple.cs"
        - name: log_filename
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
         - echo `date` - "** START Temporal 4 tuple generation **" &>> ${log_filename};
           python aida_event_time_pipeline.py --time_cold_start_filename ${time_cold_start_filename} --event_cold_start_filename {event_cold_start_filename} --read_cs_event --parent_children_filename {parent_child_tab_path} --use_dct_as_default --ltf_path ${ltf_path} --output_filename {output_filename} --lang {lang} &
           python aida_event_time_pipeline.py --time_cold_start_filename ${time_cold_start_filename_ru} --event_cold_start_filename {event_cold_start_filename_ru} --parent_children_filename {parent_child_tab_path_ru} --output_filename {output_filename_ru} --lang {lang_ru} &
           python aida_event_time_pipeline.py --time_cold_start_filename ${time_cold_start_filename_es} --event_cold_start_filename {event_cold_start_filename_es} --parent_children_filename {parent_child_tab_path_es} --output_filename {output_filename_es} --lang {lang_es} &
           wait &>> ${log_filename};
           echo `date` - "END Temporal 4 tuple generation **" &>> ${log_filename};
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Event Informative Justification
################################
      - name: event-info-justification
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: event_corefer_time
          value: "/output/WORKING/data/en/event/events_4tuple.cs"
        - name: event_final
          value: "/output/WORKING/data/en/event/events_info.cs"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: event_corefer_time_ru
          value: "/output/WORKING/data/ru/event/events_4tuple.cs"
        - name: event_final_ru
          value: "/output/WORKING/data/ru/event/events_info.cs"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: event_corefer_time_es
          value: "/output/WORKING/data/es/event/events_4tuple.cs"
        - name: event_final_es
          value: "/output/WORKING/data/es/event/events_info.cs"
        command: ["/bin/bash", "-c"]
        args:
         - echo `date` - "** START Event Informative Justification **";
           /opt/conda/envs/py36/bin/python /event/aida_event/postprocessing_event_informative_mentions.py  ${ltf_source} ${event_corefer_time} ${event_final} --eval m36 &
           /opt/conda/envs/py36/bin/python /event/aida_event/postprocessing_event_informative_mentions.py  ${ltf_source_ru} ${event_corefer_time_ru} ${event_final_ru} --eval m36 &
           /opt/conda/envs/py36/bin/python /event/aida_event/postprocessing_event_informative_mentions.py  ${ltf_source_es} ${event_corefer_time_es} ${event_final_es} --eval m36 &
           wait;
           echo `date` - "END Event Informative Justification";
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Final Merge -> Format converter
################################
      - name: final-merge
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: event_result_dir
          value: "/output/WORKING/data/en/event"
        - name: data_root
          value: "/output/WORKING/data/en"
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        - name: relation_result_dir
          value: "/output/WORKING/data/en/relation"
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: parent_child_tab_path
          value: "/input/docs/parent_children.tab"
        - name: edl_vec_file
          value: "english.mention.hidden.txt"
        - name: evt_vec_file
          value: "english.trigger.hidden.txt"
        - name: edl_tab_freebase_file
          value: "en.linking.freebase.tab"
        - name: edl_json_fine_file
          value: "en.linking.freebase.fine.json"
        - name: lorelei_link_private_data
          value: "lorelei_private_data.json"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: event_result_dir_ru
          value: "/output/WORKING/data/ru/event"
        - name: data_root_ru
          value: "/output/WORKING/data/ru"
        - name: edl_output_dir_ru
          value: "/output/WORKING/data/ru/edl"
        - name: relation_result_dir_ru
          value: "/output/WORKING/data/ru/relation"
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: parent_child_tab_path_ru
          value: "/input/docs/parent_children.tab"
        - name: edl_vec_file_ru
          value: "russian.mention.hidden.txt"
        - name: evt_vec_file_ru
          value: "russian.trigger.hidden.txt"
        - name: edl_tab_freebase_file_ru
          value: "ru.linking.freebase.tab"
        - name: edl_json_fine_file_ru
          value: "ru.linking.freebase.fine.json"
        - name: lorelei_link_private_data_ru
          value: "lorelei_private_data.json"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: event_result_dir_es
          value: "/output/WORKING/data/es/event"
        - name: data_root_es
          value: "/output/WORKING/data/es"
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        - name: relation_result_dir_es
          value: "/output/WORKING/data/es/relation"
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: parent_child_tab_path_es
          value: "/input/docs/parent_children.tab"
        - name: edl_vec_file_es
          value: "spanish.mention.hidden.txt"
        - name: evt_vec_file_es
          value: "spanish.trigger.hidden.txt"
        - name: edl_tab_freebase_file_es
          value: "es.linking.freebase.tab"
        - name: edl_json_fine_file_es
          value: "es.linking.freebase.fine.json"
        - name: lorelei_link_private_data_es
          value: "lorelei_private_data.json"
        command: ["/bin/bash", "-c"]
        args:

#TODO: before pipeline_merge run this:
#docker run -i -t --rm -v ${data_root}:${data_root} \
#    -v ${parent_child_tab_path}:${parent_child_tab_path} \	    -v ${parent_child_tab_path}:${parent_child_tab_path} \
#    -w /EventTimeArg --gpus all wenhycs/uiuc_event_time \	    -w /EventTimeArg --gpus device=2 wenhycs/uiuc_event_time \
#    python aida_event_time_pipeline.py \	    python aida_event_time_pipeline.py \
#    --time_cold_start_filename ${filler_coarse} \	    --time_cold_start_filename ${filler_coarse} \
#    --event_cold_start_filename ${event_corefer} \	    --event_cold_start_filename ${event_corefer} \
#
# change pipeline merge to use these params:
#    --cs_fnames ${edl_cs_info_conf} ${edl_cs_color} ${relation_4tuple} ${event_final} \
          - echo `date` - "** Merging all items **";
            /opt/conda/envs/py36/bin/python /postprocessing/pipeline_merge.py
           --cs_fnames ${edl_output_dir}/merged_all_fine_info_conf.cs ${edl_output_dir}/${lang}.color.cs ${relation_result_dir}/${lang}/${lang}.fine_rel.cs ${event_result_dir}/events_info.cs --output_file ${data_root}/${lang}${source}_full.cs --eval m36;
            echo `date` - "multiple freebase links";
            /opt/conda/envs/py36/bin/python /aida_utilities/postprocessing_link_freebase.py
            ${edl_output_dir}/${lang}.linking.freebase.tab ${data_root}/${lang}${source}_full.cs ${edl_output_dir}/freebase_private_data.json;
            echo `date` - "multiple lorelei links";
            /opt/conda/envs/py36/bin/python /aida_utilities/postprocessing_link_confidence.py
            ${edl_output_dir}/${lang}.linking.tab.candidates.json ${data_root}/${lang}${source}_full.cs ${data_root}/${lang}${source}_full_link.cs ${edl_output_dir}/lorelei_private_data.json --eval m36;
            echo `date` - "** Format converter **";
            echo `date` - "Start AIF converter";
            /opt/conda/envs/aida_entity/bin/python /postprocessing/aif_converter_combine.py
            --input_cs ${data_root}/${lang}${source}_full_link.cs --ltf_dir ${ltf_source}
            --output_ttl_dir ${data_root}/initial --lang ${lang}${source} --eval m36
            --evt_coref_score_tab ${event_result_dir}/events_corefer_confidence.tab --source_tab ${parent_child_tab_path}
            --ent_vec_dir ${data_root}/mention
            --ent_vec_files ${edl_vec_file}
            --evt_vec_dir ${data_root}/mention
            --evt_vec_files ${evt_vec_file}
            --event_embedding_from_file
            --freebase_tab ${edl_output_dir}/${edl_tab_freebase_file}
            --fine_grained_entity_type_path ${edl_output_dir}/${edl_json_fine_file}
            --lorelei_link_mapping ${edl_output_dir}/${lorelei_link_private_data}
            --parent_child_tab_path ${parent_child_tab_path};

            echo `date` - "** Merging all items RU **";
            /opt/conda/envs/py36/bin/python /postprocessing/pipeline_merge.py
            --cs_fnames ${edl_output_dir_ru}/merged_all_fine_info_conf.cs ${edl_output_dir_ru}/${lang_ru}.color.cs ${relation_result_dir_ru}/${lang_ru}/${lang_ru}.fine_rel.cs ${event_result_dir_ru}/events_info.cs --output_file ${data_root_ru}/${lang_ru}${source_ru}_full.cs --eval m36;
            echo `date` - "multiple freebase links";
            /opt/conda/envs/py36/bin/python /aida_utilities/postprocessing_link_freebase.py
            ${edl_output_dir_ru}/${lang_ru}.linking.freebase.tab ${data_root_ru}/${lang_ru}${source_ru}_full.cs ${edl_output_dir_ru}/freebase_private_data.json;
            echo `date` - "multiple lorelei links";
            /opt/conda/envs/py36/bin/python /aida_utilities/postprocessing_link_confidence.py
            ${edl_output_dir_ru}/${lang_ru}.linking.tab.candidates.json ${data_root_ru}/${lang_ru}${source_ru}_full.cs ${data_root_ru}/${lang_ru}${source_ru}_full_link.cs ${edl_output_dir_ru}/lorelei_private_data.json;
            echo `date` - "** Format converter **";
            echo `date` - "Start AIF converter";
            /opt/conda/envs/aida_entity/bin/python /postprocessing/aif_converter_combine.py
            --input_cs ${data_root_ru}/${lang_ru}${source_ru}_full_link.cs --ltf_dir ${ltf_source_ru}
            --output_ttl_dir ${data_root_ru}/initial --lang ${lang_ru}${source_ru} --eval m36
            --evt_coref_score_tab ${event_result_dir_ru}/events_corefer_confidence.tab --source_tab ${parent_child_tab_path_ru} --ent_vec_dir ${data_root}/mention;

            echo `date` - "** Merging all items ES **";
            /opt/conda/envs/py36/bin/python /postprocessing/pipeline_merge.py
            --cs_fnames ${edl_output_dir_es}/merged_all_fine_info_conf.cs ${edl_output_dir_es}/${lang_es}.color.cs ${relation_result_dir_es}/${lang_es}/${lang_es}.fine_rel.cs ${event_result_dir_es}/events_info.cs --output_file ${data_root_es}/${lang_es}${source_es}_full.cs --eval m36;
            echo `date` - "multiple freebase links";
            /opt/conda/envs/py36/bin/python /aida_utilities/postprocessing_link_freebase.py
            ${edl_output_dir_es}/${lang_es}.linking.freebase.tab ${data_root_es}/${lang_es}${source_es}_full.cs ${edl_output_dir_es}/freebase_private_data.json;
            echo `date` - "multiple lorelei links";
            /opt/conda/envs/py36/bin/python /aida_utilities/postprocessing_link_confidence.py
            ${edl_output_dir_es}/${lang_es}.linking.tab.candidates.json ${data_root_es}/${lang_es}${source_es}_full.cs ${data_root_es}/${lang_es}${source_es}_full_link.cs ${edl_output_dir_es}/lorelei_private_data.json;
            echo `date` - "** Format converter **";
            echo `date` - "** START AIF converter";
            /opt/conda/envs/py36/bin/python /postprocessing/aif_converter.py
            --input_cs ${data_root_es}/${lang_es}${source_es}_full_link.cs --ltf_dir ${ltf_source_es}
            --output_ttl_dir ${data_root_es}/initial --lang ${lang_es}${source_es} --eval m36
            --evt_coref_score_tab ${event_result_dir_es}/events_corefer_confidence.tab --source_tab ${parent_child_tab_path_es};
            echo `date` - "END AIF converter";

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## coldstart2aidainterchange
################################
### REMOVED
#      - name: coldstart2aidainterchange
#        image: limanling/aida-tools
#        imagePullPolicy: IfNotPresent
#        workingDir: /aida-tools-master
#        env:
#        #ENGLISH
#        - name: data_root
#          value: "output/WORKING/data/en"
#        #RUSSIAN
#        - name: data_root_ru
#          value: "output/WORKING/data/ru"
#        #UKRANIAN
# #       - name: data_root_uk
# #         value: "output/WORKING/data/uk"
#        command: ["/bin/bash", "-c"]
#        args:
#          - mkdir -p /aida-tools-master/sample_params/m18-eval/output/WORKING/data;
#            ln -s /output/WORKING/data/en /aida-tools-master/sample_params/m18-eval/output/WORKING/data;
#            /aida-tools-master/aida-eval-tools/target/appassembler/bin/coldstart2AidaInterchange sample_params/m18-eval/${data_root}/converter.param;
#
#            ln -s /output/WORKING/data/ru /aida-tools-master/sample_params/m18-eval/output/WORKING/data;
#            /aida-tools-master/aida-eval-tools/target/appassembler/bin/coldstart2AidaInterchange sample_params/m18-eval/${data_root_ru}/converter.param;
#
##            ln -s /output/WORKING/data/uk /aida-tools-master/sample_params/m18-eval/output/WORKING/data;
##            /aida-tools-master/aida-eval-tools/target/appassembler/bin/coldstart2AidaInterchange sample_params/m18-eval/${data_root_uk}/converter.param;
#        volumeMounts:
#          - name: input-efs
#            mountPath: "/input"
#            readOnly: true #Input Volume for worker will be set to readOnly
#          - name: output-efs
#            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Append private information
################################
      - name: append-private-information
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: data_root
          value: "output/WORKING/data/en"
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        - name: source
          value: "" # no asr or ocr atm
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: parent_child_tab_path
          value: /input/docs/parent_children.tab
        - name: sorted
          value: "0"
        - name: edl_vec_file1
          value: "en_nom_5type.mention.hidden.txt"
        - name: edl_vec_file2
          value: "en_nom_wv.mention.hidden.txt"
        - name: edl_vec_file3
          value: "en_pro.mention.hidden.txt"
        - name: edl_vec_file4
          value: "en_nam.mention.hidden.txt"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: data_root_ru
          value: "output/WORKING/data/ru"
        - name: edl_output_dir_ru
          value: "/output/WORKING/data/ru/edl"
        - name: source_ru
          value: "" # no asr or ocr atm
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: parent_child_tab_path_ru
          value: /input/docs/parent_children.tab
        - name: sorted_ru
          value: "0"
        - name: edl_vec_file1_ru
          value: "ru_nam_5type.mention.hidden.txt"
        - name: edl_vec_file2_ru
          value: "ru_nam_wv.mention.hidden.txt"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: data_root_es
          value: "output/WORKING/data/es"
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        - name: source_es
          value: "" # no asr or ocr atm
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: parent_child_tab_path_es
          value: /input/docs/parent_children.tab
        - name: sorted_es
          value: "0"
        - name: edl_vec_file1_es
          value: "es_nam_5type.mention.hidden.txt"
        - name: edl_vec_file2_es
          value: "es_nam_wv.mention.hidden.txt"
        command: ["/bin/bash", "-c"]
        args:
          #NOTE: KeyError here
          - echo `date` - "START append-private-information";

            /opt/conda/envs/py36/bin/python postprocessing/postprocessing_rename_turtle.py
            --language_id ${lang}${source} --input_private_folder ${data_root}/initial --output_folder ${data_root}/final
            --parent_child_tab_path ${parent_child_tab_path} --parent_child_mapping_sorted ${sorted};

            chmod -R 777 ${data_root}/final ${data_root}/initial;

            echo `date` - "END append-private-information";
            echo "Final result in Cold Start Format is in ${data_root}/${lang}${source}_full_link.cs";
            echo "Final result in RDF Format is in ${data_root}/final";

            echo `date` - "START RU append-private-information";
            /opt/conda/envs/aida_entity/bin/python /postprocessing/postprocessing_append_private_data_m36.py;

            /opt/conda/envs/py36/bin/python /postprocessing/postprocessing_rename_turtle.py
            --language_id ${lang_ru}${source_ru}
            --input_private_folder ${data_root_ru}/initial_private_data
            --output_folder ${data_root_ru}/final
            --parent_child_tab_path ${parent_child_tab_path_ru}
            --parent_child_mapping_sorted ${sorted_ru};

            chmod -R 777 ${data_root_ru}/final ${data_root_ru}/initial_private_data;

            echo `date` - "END RU append-private-information";
            echo "Final RU result in Cold Start Format is in ${data_root_ru}/${lang_ru}${source_ru}_full_link.cs";
            echo "Final RU result in RDF Format is in ${data_root_ru}/final";

            echo `date` - "START ES append-private-information";

            /opt/conda/envs/py36/bin/python /postprocessing/postprocessing_rename_turtle.py
            --language_id ${lang_es}${source_es}
            --input_private_folder ${data_root_es}/initial_private_data
            --output_folder ${data_root_es}/final
            --parent_child_tab_path ${parent_child_tab_path_es}
            --parent_child_mapping_sorted ${sorted_es};

            chmod -R 777 ${data_root_es}/final ${data_root_es}/initial_private_data;

            echo `date` - "END ES append-private-information";
            echo "Final ES result in Cold Start Format is in ${data_root_es}/${lang_es}${source_es}_full_link.cs";
            echo "Final ES result in RDF Format is in ${data_root_es}/final";
            find ${data_root_es} -name 'merged.cs';
            find ${data_root_es} -name 'merged_final.tab';
            find ${data_root_es} -name 'events_tme.cs';
#TODO: copy files for sentiment to /output/WORKING/uiuc_ttl_results/
#TODO: copy files needed by CU, text mention results in /output/WORKING/uiuc_ttl_results
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Columbia University Face, Flag, Landmark Detection
################################
## CU: Brian Chen
## https://hub.docker.com/repository/docker/gaiaaida/face-building
## See https://github.com/isi-vista/aida-integration/#columbia-university-face-flag-landmark-detection

      - name: cu-face-building
        image: gaiaaida/face-building:0.3
        imagePullPolicy: IfNotPresent
        env:
        - name: parent_child_tab
          value: "/input/docs/parent_children.tab"
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: FACE_OUTPUT
          value: "/output/WORKING/cu-face-building/"
        command: ["/bin/bash", "-c"]
# needs UIUC text mention results in /output/WORKING/uiuc_ttl_results
# needs CU objdet results in /output/WORKING/cu_objdet_results
        args:
          - echo `date` - "START CU Face, Flag, Landmark Detection";
           echo "INPUT "${INPUT};
           echo "OUTPUT "${OUTPUT};
           working_path=${OUTPUT}/WORKING;
           txt_mention_ttl_path = working_path + 'uiuc_ttl_results';
           det_results_path_graph = working_path + 'cu_objdet_results/aida_output_34.pkl';
           det_results_path_img = working_path + 'cu_objdet_results/det_results_merged_34a.pkl';
           det_results_path_kfrm = working_path + 'cu_objdet_results/det_results_merged_34b.pkl';
           echo "FACE_OUTPUT "${FACE_OUTPUT};
           ls -ahl /input/docs/;
           ls -ahl /input/data/jpg/;
           ls -ahl /input/data/jpg/jpg/;
           ls -ahl /input/data/video_shot_boundaries/representative_frames/;
           mkdir -p ${FACE_OUTPUT};
           /bin/bash -c ./full_script.sh/;
           ls -ahl /output/;
           ls -ahl ${FACE_OUTPUT};
           find . -name '*cu_object*'
           out_ttl=working_path + 'cu_object_FFT_ttl/';
           echo `date` - "END CU Face, Flag, Landmark Detection";

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Columbia University Visual Grounding
################################
## CU: Xudong Lin
## https://hub.docker.com/repository/docker/gaiaaida/grounding-merging
## See https://github.com/isi-vista/aida-integration/#columbia-university-visual-grounding
      - name: cu-visual-grounding
        image: gaiaaida/grounding-merging:0.3
        imagePullPolicy: IfNotPresent
        env:
        - name: parent_child_tab
          value: "/input/docs/parent_children.tab"
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: VISGRD_OUTPUT
          value: "/output/WORKING/cu-visual-grounding/"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "START CU Visual Grounding";
            mkdir -p ${VISGRD_OUTPUT};
            python ./smoke_test.py;
            python ./Feature_Extraction.py;
            python ./Visual_Grounding_mp.py;
            source activate aida-env && which python;
            ls -ahl ${VISGRD_OUTPUT};
            find . -name '*.pickle';
            echo `date` - "END CU Visual Grounding";

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)
# This should produce `entity2mention_dict_M36.pickle` `id2mentions_dict_M36.pickle`


################################
## USC Grounding
################################
## USC: Haidong Zhu
## https://hub.docker.com/repository/docker/gaiaaida/detection-grounding
## See https://github.com/isi-vista/aida-integration#usc-grounding
      - name: usc-grounding
        image: gaiaaida/detection-grounding:0.2
        imagePullPolicy: IfNotPresent
        env:
        - name: parent_child_tab
          value: "/input/docs/parent_children.tab"
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: GRD_OUTPUT
          value: "/output/WORKING/usc-grounding/"
        command: ["/bin/bash", "-c"]
        args:
# REQUIRES:
# entity2mention_dict_E1.pickle
# id2mentions_dict_E1.pickle
# parent_children.sorted.tab
# TODO: USC object detection already ran, so what parts can we skip here:
         - echo `date` - "** START USC Object Detection and Grounding **";
           echo "INPUT "${INPUT};
           echo "OUTPUT "${OUTPUT};
           echo "GRD_OUTPUT "${GRD_OUTPUT};
           ls -ahl /input/docs/;
           ls -ahl /input/data/jpg/;
           mkdir -p ${GRD_OUTPUT};
           find . -name '*.pickle';
           cd /aida/src/;
           python ./code/smoke_test.py;
           python ./code/aida_ds_creator.py;
           cd ./open_images_pfdet/;
           python -m torch.distributed.launch --nproc_per_node=1 code/only_test.py "test_aida_1"
             --test_stuff.tdir=../data/aida_m18_eval/ --test_stuff.ds_info.img_dir=m18_eval/data_converted
             --test_stuff.ds_info.ann_file=op_imgs_aida_m18_eval_dict_for_proc.json --resume=True
             --resume_path='./tmp/models/aida_model_Aug17.pth' --ds='open_images' --only_test=True;
           cd ../;
           python ./code/mrcnn_2_aida.py;
           python ./code/columbia_idmentions_2_phrase_file.py --fin1=False;
           python ./code/ground_naive.py;
           python ./code/columbia_idmentions_2_phrase_file.py --fin1=True;
           find . -name 'uscvision_grounding_output_cu_format_E1.pickle;
           RESULTS=./uscvision_grounding_output_cu_format_E1.pickle;
           cp ${RESULTS} ${GRD_OUTPUT};
           echo `date` - "END USC Object Detection and Grounding";

# RESULTS:  uscvision_grounding_output_cu_format_E1.pickle
# Do we need these copied too?
# aida_grounded_bbox_scores_E1.json
# dryrun_grounding_list_E1.json
# m36_eval_png_detn_results_usc_vision_oi_res50.pkl
# m36_eval_representative_frames_detn_results_usc_vision_oi_res50.pkl
# m36_eval_detn_results_usc_vision_oi_res50.pkl
# m36_eval_jpg_detn_results_usc_vision_oi_res50.pkl

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)


################################
## USC Scene Prediction
################################
## USC: Haidong Zhu
## See notes
## Is this to be included?

################################
## Columbia University Graph Merging
################################
## CU: Xudong Lin
## https://hub.docker.com/repository/docker/gaiaaida/grounding-merging
## See https://github.com/isi-vista/aida-integration/#columbia-university-visual-grounding
# gaiaaida/grounding-merging
# $ INPUT= /host_input/
# $ OUTPUT=/host_output/
# $ # please create the folder /columbia_vision_shared/ under the ${OUTPUT}/WORKING/ directory for output files
# $ mkdir  ${OUTPUT}/WORKING/columbia_vision_shared/
# please run the necessary modules (CU_Object_Detection, CU_Face/Flag/Landmark_Recognition and UIUC_Text_Pipeline)
# download the the required result files to the shared directory: ${OUTPUT}/WORKING/columbia_vision_shared/
# $ GPU_ID=[a single integer index to the GPU]
# $ docker run -itd -e CUDA_VISIBLE_DEVICES=${GPU_ID} --gpus ${GPU_ID} --name aida-gm -v columbia_visual_grounding_models/:/root/models -v ${INPUT}:/root/LDC:ro -v ${OUTPUT}/WORKING/columbia_vision_shared/:/root/shared aida-grounding-merging /bin/bash

      - name: cu-graph-merging
        image: gaiaaida/grounding-merging:0.3
        imagePullPolicy: IfNotPresent
        env:
        - name: parent_child_tab
          value: "/input/docs/parent_children.tab"
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: CU_VISION_SHARED
          value: "/output/WORKING/columbia_vision_shared/"
        - name: MERGE_OUTPUT
          value: "/output/WORKING/columbia_vision_merged/"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "START CU Graph Mergingg";
            ls -ahl ${CU_VISION_SHARED};
            mkdir -p ${MERGE_OUTPUT};
            python ./smoke_test.py;
            python ./Graph_Merging.py;
            source activate aida-env && which python;
            RESULTS=./cu_graph_merging_ttl/;
            ls -ahl ${RESULTS};
            cp -r ${RESULTS} ${MERGE_OUTPUT};
            ls -ahl ${MERGE_OUTPUT};
            find . -name 'cu_graph_merging_ttl';
            echo `date` - "END CU Graph Merging";
# CU graph merging result path
#merged_graph_path = working_path + 'cu_graph_merging_ttl/' + version_folder + 'merged_ttl_'+ p_f_run + '/'
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Columbia University Sentiment
################################
## CU: Amith Ananthram
## https://hub.docker.com/repository/docker/gaiaaida/sentiment
## See https://github.com/isi-vista/aida-integration/#cu-sentiment

      - name: cu-sentiment
        image: gaiaaida/sentiment:0.2
        imagePullPolicy: IfNotPresent
        env:
        - name: parent_child_tab
          value: "/input/docs/parent_children.tab"
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: UIUC_RESULTS_SHARED
          value: "/output/WORKING/uiuc_ttl_results/"
        - name: SENTIMENT_OUTPUT
          value: "/output/WORKING/columbia_sentiment/"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "START CU Sentiment";
            ls -ahl ${UIUC_RESULTS_SHARED};
            mkdir -p ${SENTIMENT_OUTPUT};
            cd /sentiment/src/full-system/;
            . ./full_script.sh /sentiment/src;
            ls -ahl ${SENTIMENT_OUTPUT};
            echo `date` - "END CU Sentiment";
# output should include en.multi_sent.sponsor_assignblame.cs
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Augment AIF
################################
## ISI: Elizabeth Lee
## See notes.  TBD.

################################
## Remove ASR
################################
## ISI: DPN
## See notes.  TBD.

      restartPolicy: Never

################################
## containers:
################################
      containers:

################################
## merging-results
################################

      - name: merging-results
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "START Merging Results";
            /opt/conda/envs/py36/bin/python /postprocessing/postprocessing_combine_turtle_from_all_sources.py
            --root_folder /output/WORKING/data
            --final_dir_name final
            --output_folder /output/INTER-TA;
            echo `date` - "END Merging Results";
            #sleep 8h
            #sleep is used to allow me to get into the container with: kubectl exec -it gaia-ta1-pipeline-xxxxx -c merging-results
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

      imagePullSecrets:
        - name: regcred
      restartPolicy: Never
      nodeSelector:
        eks.amazonaws.com/nodegroup: gaia-eks-nodegroup
