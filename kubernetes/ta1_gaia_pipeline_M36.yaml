apiVersion: batch/v1
kind: Job
metadata:
 name: gaia-ta1-pipeline
spec:
  backoffLimit: 0
  template:
 #   metadata:
 #     name: gaia-ta1-pipeline
    spec:
      volumes:
        - name: input-efs
          nfs:
            server: fs-f330b371.efs.us-east-1.amazonaws.com #m36-dryrun-source-LDC2020E11-SMALL
            path: /
        - name: output-efs
          nfs:
            server: fs-4bc84ac9.efs.us-east-1.amazonaws.com #teamgaia-ta1-output # sudo mount -t
            path: /
        - name: refkb-efs
          nfs:
            server: fs-dacc6a58.efs.us-east-1.amazonaws.com #m36-dryrun-refkb-efs (fs-dacc6a58) - sudo mount -t efs -o tls fs-dacc6a58:/ efs
            path: /
        #If you want to use a local folder as a volume, you can remove the NFS above and recreate them with a local volume for testing. The names need to match with the volumeMounts of the container
        # - name: input-efs
          # hostPath:
          # path: "C:/some/local/input"
        # - name: output-efs
          # hostPath:
          # path: "C:/some/local/output"

      initContainers:
###############################
# Mongo DB Imports
###############################
      - name: gaia-mongodb-pod
        image: panx27/edl
        env:
        - name: REF_KB
          value: "/refkb"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
         - mkdir -p /output/WORKING;
           echo `date` - "** START Mongo Import KB **" &>> ${log};
           python ./projs/docker_aida19/kb/import_kb.py /refkb/data/entities.tab &>> ${log};
           echo `date` - "END Mongo Import KB" &>> ${log};
         - mkdir -p /output/WORKING;
           echo `date` - "** START Mongo Import Mentions **" &>> ${log};
           python ./projs/docker_aida19/kb/import_mentions.py /refkb/data/entities.tab &>> ${log};
           echo `date` - "END Mongo Import Mentions" &>> ${log};
        volumeMounts:
          - name: refkb-efs
            mountPath: "/refkb"
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)
        securityContext:
          privileged: true

################################
## setup-edl-rsd
################################
      - name: setup-edl-rsd
        image: limanling/uiuc_ie_m36
        imagePullPolicy: Always
        env:
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
         - echo `date` - "** START setup edl rsd **" &>> ${log};
           mkdir -p /output/WORKING/system/data;
           mkdir -p /output/WORKING/system/aida_edl;
           mkdir -p /output/WORKING/system/rsd;
           mkdir -p /output/WORKING/data;
           wget -nc http://159.89.180.81/demo/resources/edl_data.tar.gz -P /output/WORKING/system/aida_edl;
           tar zxvf /output/WORKING/system/aida_edl/edl_data.tar.gz -C /output/WORKING/data;
           perl /input/tools/ltf2txt/ltf2rsd.perl -o /output/WORKING/system/rsd /input/data/ltf &>> ${log};
           echo `date` - "END setup edl rsd" &>> ${log};

        volumeMounts:
          - name: input-efs
            mountPath: /input
            readOnly: true
          - name: output-efs
            mountPath: /output #Please put your output here

###############################
# detect-lang
###############################
      - name: detect-lang
        image: limanling/uiuc_ie_m36
        env:
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START detect lang **" &>> ${log};
            /opt/conda/envs/py36/bin/python /preprocessing/preprocess_detect_languages.py /output/WORKING/system/rsd /input/data/ltf /output/WORKING/data --langs en ru es --parent_child_tab_path /input/docs/parent_children.tab &
            wait &>> ${log};
            ls -ahld /output/WORKING/system/rsd &>> ${log};
            ls -ahld /output/WORKING/data &>> ${log};
            echo `date` - "END detect lang" &>> ${log};

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

# ###############################################################################
# # BEGIN - Commented per Dan and Manling
# ###############################################################################

      # - name: asr
        # image: limanling/uiuc_ie_m18
        # imagePullPolicy: IfNotPresent
        # env:
        # - name: en_asr_aln
          # value: null
        # - name: en_asr_rsd
          # value: "/output/WORKING/data/en_asr/rsd"
        # - name: en_asr_rsd_file_list
          # value: "/output/WORKING/data/en_asr/en_asr_truecase_list"
        # - name: en_asr_ltf
          # value: "/output/WORKING/data/en_asr/ltf"
        # - name: en_asr_mapping_file_path
          # value: "/output/WORKING/data/en_asr/en_asr_mapping"
        # command: ["/bin/bash", "-c"]
        # args:
          # - /opt/conda/envs/py36/bin/python /preprocessing/preprocess_asr.py ${en_asr_aln} $(en_asr_rsd) $(en_asr_rsd_file_list);
          # #for merging, temp placement
          # - mkdir -p /output/WORKING/data/kb/ttl/final;
            # mkdir -p $(en_asr_ltf);
            # /opt/conda/envs/py36/bin/python /aida_utilities/rsd2ltf.py $(en_asr_rsd) $(en_asr_ltf) --seg_option nltk+linebreak --tok_option space --extension .rsd.txt;
            # /opt/conda/envs/py36/bin/python /preprocessing/asr_sentence_mapping.py $(en_asr_ltf) ${en_asr_aln} $(en_asr_mapping_file_path)
        # volumeMounts:
          # - name: input-efs
            # mountPath: "/input"
            # readOnly: true #Input Volume for worker will be set to readOnly
          # - name: output-efs
            # mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)
      # - name: english-ocr
        # image: limanling/uiuc_ie_m18
        # imagePullPolicy: IfNotPresent
        # env:
        # - name: en_ocr_csv_file
          # value: null
        # - name: en_ocr_rsd
          # value: "/output/WORKING/data/en_ocr/rsd"
        # - name: en_ocr_ltf
          # value: "/output/WORKING/data/en_ocr/ltf"
        # command: ["/bin/bash", "-c"]
        # args:
          # #- /opt/conda/envs/py36/bin/python /preprocessing/preprocess_ocr.py ${en_ocr_csv_file} ${en_ocr_rsd}
          # - mkdir -p ${en_ocr_ltf};
            # /opt/conda/envs/py36/bin/python /aida_utilities/rsd2ltf.py ${en_ocr_rsd} ${en_ocr_ltf} --seg_option nltk+linebreak --tok_option unitok --extension .rsd.txt
        # volumeMounts:
          # - name: input-efs
            # mountPath: "/input"
            # readOnly: true #Input Volume for worker will be set to readOnly
          # - name: output-efs
            # mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)
      # - name: russian-ocr
        # image: limanling/uiuc_ie_m18
        # imagePullPolicy: IfNotPresent
        # env:
        # - name: ru_ocr_csv_file
          # value: null
        # - name: ru_ocr_rsd
          # value: "/output/WORKING/data/ru_ocr/rsd"
        # - name: ru_ocr_ltf
          # value: "/output/WORKING/data/ru_ocr/ltf"
        # command: ["/bin/bash", "-c"]
        # args:
          # #- /opt/conda/envs/py36/bin/python /preprocessing/preprocess_ocr.py ${ru_ocr_csv_file} ${ru_ocr_rsd}
          # - mkdir -p ${ru_ocr_ltf}
          # - /opt/conda/envs/py36/bin/python /aida_utilities/rsd2ltf.py ${ru_ocr_rsd} ${ru_ocr_ltf} --seg_option nltk+linebreak --tok_option unitok --extension .rsd.txt
        # volumeMounts:
          # - name: input-efs
            # mountPath: "/input"
            # readOnly: true #Input Volume for worker will be set to readOnly
          # - name: output-efs
            # mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

# ###############################################################################
# # END - Commented per Dan and Manling
# ###############################################################################

################################
## generate-bio-list-en
################################
      - name: generate-bio-list-en
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: ltf_file_list
          value: "/output/WORKING/data/en/ltf_lst"
        - name: edl_bio
          value: "/output/WORKING/data/en/edl/en.bio"
        - name: rsd_source
          value: "/output/WORKING/data/en/rsd"
        - name: rsd_file_list
          value: "/output/WORKING/data/en/rsd_lst"
        - name: timetable_tab
          value: "/output/WORKING/data/en/time_table.tab"
        - name: core_nlp_output_path
          value: "/output/WORKING/data/en/corenlp"
        #RUSSIAN
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: ltf_file_list_ru
          value: "/output/WORKING/data/ru/ltf_lst"
        - name: edl_bio_ru
          value: "/output/WORKING/data/ru/edl/ru.bio"
        - name: rsd_source_ru
          value: "/output/WORKING/data/ru/rsd"
        - name: rsd_file_list_ru
          value: "/output/WORKING/data/ru/rsd_lst"
        - name: timetable_tab_ru
          value: "/output/WORKING/data/ru/time_table.tab"
        - name: core_nlp_output_path_ru
          value: "/output/WORKING/data/ru/corenlp"
        #SPANISH
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: ltf_file_list_es
          value: "/output/WORKING/data/es/ltf_lst"
        - name: edl_bio_es
          value: "/output/WORKING/data/es/edl/es.bio"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        - name: rsd_file_list_es
          value: "/output/WORKING/data/es/rsd_lst"
        - name: timetable_tab_es
          value: "/output/WORKING/data/es/time_table.tab"
        - name: core_nlp_output_path_es
          value: "/output/WORKING/data/es/corenlp"
        - name: parent_child_tab
          value: "/input/docs/parent_children.tab"
        - name: sorted
          value: "0"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START generate bio list **" &>> ${log};
            mkdir -p /output/WORKING/data/es/ltf;
            mkdir -p /output/WORKING/data/en/ltf;
            mkdir -p /output/WORKING/data/ru/ltf;
            mkdir -p /output/WORKING/data/es/edl;
            mkdir -p /output/WORKING/data/en/edl;
            mkdir -p /output/WORKING/data/ru/edl;
            /opt/conda/envs/py36/bin/python /aida_utilities/ltf2bio.py ${ltf_source} ${edl_bio} &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/dir_readlink.py ${rsd_source} ${rsd_file_list} &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/dir_ls.py ${ltf_source} ${ltf_file_list} &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/parent_child_util.py ${parent_child_tab} ${sorted} ${timetable_tab} &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/ltf2bio.py ${ltf_source_ru} ${edl_bio_ru} &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/dir_readlink.py ${rsd_source_ru} ${rsd_file_list_ru} &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/dir_ls.py ${ltf_source_ru} ${ltf_file_list_ru} &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/parent_child_util.py ${parent_child_tab} ${sorted} ${timetable_tab_ru} &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/ltf2bio.py ${ltf_source_es} ${edl_bio_es} &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/dir_readlink.py ${rsd_source_es} ${rsd_file_list_es} &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/dir_ls.py ${ltf_source_es} ${ltf_file_list_es} &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/parent_child_util.py ${parent_child_tab} ${sorted} ${timetable_tab_es} &>> ${log};
            
            # /opt/conda/envs/py36/bin/python /preprocessing/postprocessing_separate_files.py ${ltf_source} ${rsd_source} ${data_root}/ltf_minibatch ${data_root}/rsd_minibatch 5 &>> ${log};
            # /opt/conda/envs/py36/bin/python /preprocessing/postprocessing_separate_files.py ${ltf_source_ru} ${rsd_source_ru} ${data_root_ru}/ltf_minibatch ${data_root_ru}/rsd_minibatch 5 &>> ${log};
            # /opt/conda/envs/py36/bin/python /preprocessing/postprocessing_separate_files.py ${ltf_source_es} ${rsd_source_es} ${data_root_es}/ltf_minibatch ${data_root_es}/rsd_minibatch 5 &>> ${log};
            
            # /opt/conda/envs/py36/bin/python /aida_utilities/ltf2bio.py ${data_root}/ltf_minibatch/0 ${data_root}/edl_minibatch/${lang}_0.bio &;
            # /opt/conda/envs/py36/bin/python /aida_utilities/ltf2bio.py ${data_root}/ltf_minibatch/1 ${data_root}/edl_minibatch/${lang}_1.bio &;
            # /opt/conda/envs/py36/bin/python /aida_utilities/ltf2bio.py ${data_root}/ltf_minibatch/2 ${data_root}/edl_minibatch/${lang}_2.bio &;
            # /opt/conda/envs/py36/bin/python /aida_utilities/ltf2bio.py ${data_root}/ltf_minibatch/3 ${data_root}/edl_minibatch/${lang}_3.bio &;
            # /opt/conda/envs/py36/bin/python /aida_utilities/ltf2bio.py ${data_root}/ltf_minibatch/4 ${data_root}/edl_minibatch/${lang}_4.bio &;

            # /opt/conda/envs/py36/bin/python /aida_utilities/dir_readlink.py ${data_root}/rsd_minibatch/0 ${data_root}/rsd_minibatch/0_rsd_lst --stanford_corenlp ${core_nlp_output_path} &;
            # /opt/conda/envs/py36/bin/python /aida_utilities/dir_readlink.py ${data_root}/rsd_minibatch/1 ${data_root}/rsd_minibatch/1_rsd_lst --stanford_corenlp ${core_nlp_output_path} &;
            # /opt/conda/envs/py36/bin/python /aida_utilities/dir_readlink.py ${data_root}/rsd_minibatch/2 ${data_root}/rsd_minibatch/2_rsd_lst --stanford_corenlp ${core_nlp_output_path} &;
            # /opt/conda/envs/py36/bin/python /aida_utilities/dir_readlink.py ${data_root}/rsd_minibatch/3 ${data_root}/rsd_minibatch/3_rsd_lst --stanford_corenlp ${core_nlp_output_path} &;
            # /opt/conda/envs/py36/bin/python /aida_utilities/dir_readlink.py ${data_root}/rsd_minibatch/4 ${data_root}/rsd_minibatch/4_rsd_lst --stanford_corenlp ${core_nlp_output_path} &;

            echo `date` - "END generate bio list" &>> ${log};

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true
          - name: output-efs
            mountPath: "/output"

# ################################
# ## timetable-tab
# ################################
#       - name: timetable-tab
#         image: limanling/uiuc_ie_m36
#         imagePullPolicy: IfNotPresent
#         env:
#         - name: parent_child_tab
#           value: "/input/docs/parent_children.tab"
#         - name: sorted
#           value: "0"
#         - name: timetable_tab
#           value: "/output/WORKING/data/en/time_table.tab"
#         - name: log
#           value: "/output/WORKING/full-text-log.txt"
#         command: ["/bin/bash", "-c"]
#         args:
#           - echo `date` - "** START timetable tab **" &>> ${log};
#             /opt/conda/envs/py36/bin/python /aida_utilities/parent_child_util.py ${parent_child_tab} ${sorted} ${timetable_tab} &>> ${log};
#             echo `date` - "END timetable tab" &>> ${log};
#         volumeMounts:
#           - name: input-efs
#             mountPath: "/input"
#             readOnly: true
#           - name: output-efs
#             mountPath: "/output"

################################
## apply-stanford-corenlp
################################
      - name: apply-stanford-corenlp
        image: limanling/aida-tools
        workingDir: /stanford-corenlp-aida_0
        imagePullPolicy: Always
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: rsd_file_list
          value: "/output/WORKING/data/en/rsd_lst"
        - name: timetable_tab
          value: "/output/WORKING/data/en/time_table.tab"
        - name: core_nlp_output_path
          value: "/output/WORKING/data/en/corenlp"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: rsd_file_list_ru
          value: "/output/WORKING/data/ru/rsd_lst"
        - name: timetable_tab_ru
          value: "/output/WORKING/data/ru/time_table.tab"
        - name: core_nlp_output_path_ru
          value: "/output/WORKING/data/ru/corenlp"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: rsd_file_list_es
          value: "/output/WORKING/data/es/rsd_lst"
        - name: timetable_tab_es
          value: "/output/WORKING/data/es/time_table.tab"
        - name: core_nlp_output_path_es
          value: "/output/WORKING/data/es/corenlp"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        - name: filter_py
          value: "/stanford-corenlp-aida_0/filter.py"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START apply Stanford corenlp **" &>> ${log};

            # echo "import xml.etree.ElementTree as ET" &>> ${filter_py};
            # echo "def filterfiles(full_list, shortlist):" &>> ${filter_py};
            # echo "  with open(full_list) as f:" &>> ${filter_py};
            # echo "    content = f.readlines()" &>> ${filter_py};
            # echo "  content = [x.strip() for x in content]" &>> ${filter_py};
            # echo "  with open(shortlist, 'w') as out_file:" &>> ${filter_py};
            # echo "    for xml_file in content:" &>> ${filter_py};
            # echo "      if len(xml_file) > 0:" &>> ${filter_py};
            # echo "        xml_text = ET.parse(xml_file);" &>> ${filter_py};
            # echo "        root=xml_text.getroot();" &>> ${filter_py};
            # echo "        max_len=0" &>> ${filter_py};
            # echo "        sent_count=0" &>> ${filter_py};
            # echo "        for ot in root.findall('./DOC/TEXT/SEG/ORIGINAL_TEXT'):" &>> ${filter_py};
            # echo "          max_len=max(max_len,len(ot.text))" &>> ${filter_py};
            # echo "          sent_count+=1" &>> ${filter_py};
            # echo "        if max_len < 1000 and sent_count < 1000:" &>> ${filter_py};
            # echo "          out_file.write(str(xml_file) + '\n')" &>> ${filter_py};
            # echo "filterfiles('/output/WORKING/data/en/rsd_lst', '/output/WORKING/data/en/rsd_lst_short')" &>> ${filter_py};
            # echo "filterfiles('/output/WORKING/data/ru/rsd_lst', '/output/WORKING/data/ru/rsd_lst_short')" &>> ${filter_py};
            # echo "filterfiles('/output/WORKING/data/es/rsd_lst', '/output/WORKING/data/es/rsd_lst_short')" &>> ${filter_py};

            # python3 filter.py &>> ${log};
            
            java -mx50g -cp '/stanford-corenlp-aida_0/*' edu.stanford.nlp.pipeline.StanfordCoreNLP $* -annotators 'tokenize,ssplit,pos,lemma,ner' -outputFormat json -filelist ${rsd_file_list} -ner.docdate.useMappingFile ${timetable_tab} -properties StanfordCoreNLP_${lang}.properties -outputDirectory ${core_nlp_output_path} &
            java -mx150g -cp '/stanford-corenlp-aida_0/*' edu.stanford.nlp.pipeline.StanfordCoreNLP $* -annotators 'tokenize,ssplit,pos,lemma,ner' -outputFormat json -filelist ${rsd_file_list_ru} -ner.docdate.useMappingFile ${timetable_tab_ru} -properties StanfordCoreNLP_${lang_ru}.properties -outputDirectory ${core_nlp_output_path_ru} &
            java -mx50g -cp '/stanford-corenlp-aida_0/*' edu.stanford.nlp.pipeline.StanfordCoreNLP $* -annotators 'tokenize,ssplit,pos,lemma,ner' -outputFormat json -filelist ${rsd_file_list_es} -ner.docdate.useMappingFile ${timetable_tab_es} -properties StanfordCoreNLP_${lang_es}.properties -outputDirectory ${core_nlp_output_path_es} &
            wait &>> ${log};
            echo `date` - "END apply Stanford corenlp" &>> ${log};
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true
          - name: output-efs
            mountPath: "/output"

################################
## universal-dependency-parser-chunk
################################
      - name: universal-dependency-parser-chunk
        image: dylandilu/chuck_coreference
        workingDir: /scr
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: core_nlp_output_path
          value: "/output/WORKING/data/en/corenlp"
        - name: edl_bio
          value: "/output/WORKING/data/en/edl/en.bio"
        - name: udp_dir
          value: "/output/WORKING/data/en/udp"
        - name: rsd_source
          value: "/output/WORKING/data/en/rsd"
        - name: chunk_file
          value: "/output/WORKING/data/en/edl/chunk.txt"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: core_nlp_output_path_ru
          value: "/output/WORKING/data/ru/corenlp"
        - name: edl_bio_ru
          value: "/output/WORKING/data/ru/edl/ru.bio"
        - name: udp_dir_ru
          value: "/output/WORKING/data/ru/udp"
        - name: rsd_source_ru
          value: "/output/WORKING/data/ru/rsd"
        - name: chunk_file_ru
          value: "/output/WORKING/data/ru/edl/chunk.txt"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: core_nlp_output_path_es
          value: "/output/WORKING/data/es/corenlp"
        - name: edl_bio_es
          value: "/output/WORKING/data/es/edl/es.bio"
        - name: udp_dir_es
          value: "/output/WORKING/data/es/udp"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        - name: chunk_file_es
          value: "/output/WORKING/data/es/edl/chunk.txt"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START universal dependency parser chunk **" &>> ${log};
            mkdir -p ${udp_dir};
            mkdir -p ${udp_dir_ru};
            mkdir -p ${udp_dir_es};
            python bio2udp.py --lang ${lang} --path_bio ${edl_bio} --udp_dir ${udp_dir} &>> ${log};
            echo "finish universal dependency parser for "${lang} &>> ${log};
            # python chunk_mine.py --udp_dir ${udp_dir} --text_dir ${rsd_source} --path_out_chunk ${chunk_file} &>> ${log};
            # echo "finish chunking for "${lang} &>> ${log};
            python bio2udp.py --lang ${lang_ru} --path_bio ${edl_bio_ru} --udp_dir ${udp_dir_ru} &>> ${log};
            echo "finish universal dependency parser for "${lang_ru} &>> ${log};
            python chunk_mine.py --udp_dir ${udp_dir_ru} --text_dir ${rsd_source_ru} --path_out_chunk ${chunk_file_ru} &>> ${log};
            echo "finish chunking for "${lang_ru} &>> ${log};
            # python bio2udp.py --lang ${lang_es} --path_bio ${edl_bio_es} --udp_dir ${udp_dir_es} &>> ${log};
            # echo "finish universal dependency parser for "${lang_es} &>> ${log};
            # python chunk_mine.py --udp_dir ${udp_dir_es} --text_dir ${rsd_source_es} --path_out_chunk ${chunk_file_es} &>> ${log};
            # echo "finish chunking for "${lang_es} &>> ${log};
            echo `date` - "END universal dependency parser chunk" &>> ${log};
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true
          - name: output-efs
            mountPath: "/output"

# ################################
# ## process-framenet-generate
# ################################
#       - name: process-framenet-generate
#         image: limanling/uiuc_ie_m36
#         imagePullPolicy: IfNotPresent
#         env:
#         #ENGLISH
#         - name: lang
#           value: "en"
#         - name: ltf_source
#           value: "/output/WORKING/data/en/ltf"
#         - name: ltf_txt_path
#           value: "/output/WORKING/data/en/event/ltf_txt"
#         - name: framenet_path
#           value: "/output/WORKING/data/en/event/framenet_res"
#         #RUSSIAN
#         - name: lang_ru
#           value: "ru"
#         - name: ltf_source_ru
#           value: "/output/WORKING/data/ru/ltf"
#         - name: ltf_txt_path_ru
#           value: "/output/WORKING/data/ru/event/ltf_txt"
#         - name: framenet_path_ru
#           value: "/output/WORKING/data/ru/event/framenet_res"
#         #SPANISH
#         - name: lang_es
#           value: "es"
#         - name: ltf_source_es
#           value: "/output/WORKING/data/es/ltf"
#         - name: ltf_txt_path_es
#           value: "/output/WORKING/data/es/event/ltf_txt"
#         - name: framenet_path_es
#           value: "/output/WORKING/data/es/event/framenet_res"
#         - name: log
#           value: "/output/WORKING/full-text-log.txt"
#         command: ["/bin/bash", "-c"]
#         args:
#           - echo `date` - "** START process-framenet-generate **" &>> ${log};
#             mkdir -p /output/WORKING/data/en/event;
#             mkdir -p /output/WORKING/data/ru/event;
#             mkdir -p /output/WORKING/data/es/event;
#             /opt/conda/envs/py36/bin/python /event/aida_event/framenet/generate_framenet.py ${lang} ${ltf_source} ${ltf_txt_path} ${framenet_path} &
#             /opt/conda/envs/py36/bin/python /event/aida_event/framenet/generate_framenet.py ${lang_ru} ${ltf_source_ru} ${ltf_txt_path_ru} ${framenet_path_ru} &
#             /opt/conda/envs/py36/bin/python /event/aida_event/framenet/generate_framenet.py ${lang_es} ${ltf_source_es} ${ltf_txt_path_es} ${framenet_path_es} &
#             wait &>> ${log};
#             echo `date` - "END Process Framenet Generate" &>> ${log};

#         volumeMounts:
#           - name: input-efs
#             mountPath: "/input"
#             readOnly: true
#           - name: output-efs
#             mountPath: "/output"

# ################################
# ## run-semafor
# ################################
#       - name: run-semafor
#         image: limanling/aida-tools
#         imagePullPolicy: IfNotPresent
#         env:
#         #ENGLISH
#         - name: ltf_txt_path
#           value: "/output/WORKING/data/en/event/ltf_txt"
#         - name: framenet_path
#           value: "/output/WORKING/data/en/event/framenet_res"
#         #RUSSIAN
#         - name: ltf_txt_path_ru
#           value: "/output/WORKING/data/ru/event/ltf_txt"
#         - name: framenet_path_ru
#           value: "/output/WORKING/data/ru/event/framenet_res"
#         #SPANISH
#         - name: ltf_txt_path_es
#           value: "/output/WORKING/data/es/event/ltf_txt"
#         - name: framenet_path_es
#           value: "/output/WORKING/data/es/event/framenet_res"
#         #ALL
#         - name: thread_num
#           value: "3"
#         - name: log
#           value: "/output/WORKING/full-text-log.txt"
#         command: ["/bin/bash", "-c"]
#         args:
#           - echo `date` - "** START Run Semafor **" &>> ${log};
#             /semafor/bin/runSemafor_dir.sh ${ltf_txt_path} ${framenet_path} ${thread_num} &
#             /semafor/bin/runSemafor_dir.sh ${ltf_txt_path_ru} ${framenet_path_ru} ${thread_num} &
#             /semafor/bin/runSemafor_dir.sh ${ltf_txt_path_es} ${framenet_path_es} ${thread_num} &
#             wait &>> ${log};
#             echo `date` - "END Run Semafor" &>> ${log};

#         volumeMounts:
#           - name: input-efs
#             mountPath: "/input"
#             readOnly: true
#           - name: output-efs
#             mountPath: "/output"

################################
## OneIE
################################
# docker run --rm -i -v ${data_root}:${data_root} -w /oneie --gpus '"device=1"' limteng/oneie_aida_m36 \
#     /opt/conda/bin/python \
#     /oneie/predict.py -i ${ltf_source} -o ${data_root} -l ${lang} --output_hidden
## this is from docker limteng/oneie_aida_m36

      - name: oneie
        image: limteng/oneie_aida_m36
        resources:
          limits:
            nvidia.com/gpu: 1 # requesting 1 GPU
        imagePullPolicy: Always
        workingDir: /oneie
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: data_root
          value: "/output/WORKING/data/en"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: data_root_ru
          value: "/output/WORKING/data/ru"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: data_root_es
          value: "/output/WORKING/data/es"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
# Logged dates are not in UTC
          - echo `date` - "** START OneIE **" &>> ${log};
            /opt/conda/bin/python /oneie/predict.py -i ${ltf_source} -o ${data_root} -l ${lang} --output_hidden  &>> ${log} &
            /opt/conda/bin/python /oneie/predict.py -i ${ltf_source_ru} -o ${data_root_ru} -l ${lang_ru} --output_hidden  &>> ${log} &
            /opt/conda/bin/python /oneie/predict.py -i ${ltf_source_es} -o ${data_root_es} -l ${lang_es} --output_hidden  &>> ${log} &
            wait &>> ${log};
            echo `date` - "END OneIE" &>> ${log};
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true # Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## EDL edl-entity-extraction
################################
      - name: edl-entity-extraction
        image: limanling/uiuc_ie_m36
        resources:
          limits:
            nvidia.com/gpu: 1 # requesting 1 GPU
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: edl_tab_nam_bio
          value: "/output/WORKING/data/en/merge/mention/en.nam.bio"
        - name: entity_fine_model
          value: "/output/WORKING/data/en/edl/merged_fine.tsv"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: edl_tab_nam_bio_ru
          value: "/output/WORKING/data/ru/merge/mention/ru.nam.bio"
        - name: entity_fine_model_ru
          value: "/output/WORKING/data/ru/edl/merged_fine.tsv"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: edl_tab_nam_bio_es
          value: "/output/WORKING/data/es/merge/mention/es.nam.bio"
        - name: entity_fine_model_es
          value: "/output/WORKING/data/es/edl/merged_fine.tsv"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START edl entity extraction **" &>> ${log};
            sed -i 's/0.0.0.0/aida-entity/' /entity/aida_edl/edl.py;
            /opt/conda/envs/py36/bin/python /entity/aida_edl/typing.py ${lang} ${edl_tab_nam_bio} ${entity_fine_model} &>> ${log} &
            /opt/conda/envs/py36/bin/python /entity/aida_edl/typing.py ${lang_ru} ${edl_tab_nam_bio_ru} ${entity_fine_model_ru} &>> ${log} &
            /opt/conda/envs/py36/bin/python /entity/aida_edl/typing.py ${lang_es} ${edl_tab_nam_bio_es} ${entity_fine_model_es} &>> ${log} &
            wait &>> ${log};
            echo `date` - "END edl entity extraction" &>> ${log};
            #modify /entity/aida_edl/edl.py - line 13 - url = 'http://0.0.0.0:5500/tagging' -> url = 'http://aida-entity:5500/tagging'
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## edl-linking
################################
      - name: edl-linking
        image: panx27/edl
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: source
          value: "" # no asr or ocr atm
        - name: edl_tab_nam_filename
          value: "/output/WORKING/data/en/merge/mention/en.nam.tab"
        - name: edl_tab_nom_filename
          value: "/output/WORKING/data/en/merge/mention/en.nom.tab"
        - name: edl_tab_pro_filename
          value: "/output/WORKING/data/en/merge/mention/en.pro.tab"
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: source_ru
          value: "" # no asr or ocr atm
        - name: edl_tab_nam_filename_ru
          value: "/output/WORKING/data/ru/merge/mention/ru.nam.tab"
        - name: edl_tab_nom_filename_ru
          value: "/output/WORKING/data/ru/merge/mention/ru.nom.tab"
        - name: edl_tab_pro_filename_ru
          value: "/output/WORKING/data/ru/merge/mention/ru.pro.tab"
        - name: edl_output_dir_ru
          value: "/output/WORKING/data/ru/edl"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: source_es
          value: "" # no asr or ocr atm
        - name: edl_tab_nam_filename_es
          value: "/output/WORKING/data/es/merge/mention/es.nam.tab"
        - name: edl_tab_nom_filename_es
          value: "/output/WORKING/data/es/merge/mention/es.nom.tab"
        - name: edl_tab_pro_filename_es
          value: "/output/WORKING/data/es/merge/mention/es.pro.tab"
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          # gonna symlink it here to avoid new volumes
          - echo `date` - "** START edl linking **" &>> ${log};
            ln -s /output/WORKING/data/edl_data /data;
            ls -ahl /output/WORKING/data/ &>> ${log};
            ls -ahl /output/WORKING/data/edl_data &>> ${log};
            ls -ahl /output/WORKING/data/es/ &>> ${log};
            ls -ahl /output/WORKING/data/es/edl/ &>> ${log};
            python ./projs/docker_aida19/aida19.py ${lang} ${edl_tab_nam_filename} ${edl_tab_nom_filename} ${edl_tab_pro_filename} ${edl_output_dir} m36 &>> ${log} &
            python ./projs/docker_aida19/aida19.py ${lang_ru} ${edl_tab_nam_filename_ru} ${edl_tab_nom_filename_ru} ${edl_tab_pro_filename_ru} ${edl_output_dir_ru} m36 &>> ${log} &
            python ./projs/docker_aida19/aida19.py ${lang_es} ${edl_tab_nam_filename_es} ${edl_tab_nom_filename_es} ${edl_tab_pro_filename_es} ${edl_output_dir_es} m36 &>> ${log} &
            wait &>> ${log};
            echo `date` - "END edl linking" &>> ${log};
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## ENGLISH edl-nominal-coreference
################################

      - name: edl-nominal-coreference-en
        image: laituan245/spanbert_entity_coref
        resources:
          limits:
            nvidia.com/gpu: 1 # requesting 1 GPU
        workingDir: /app
        imagePullPolicy: IfNotPresent
        env:
        - name: data_root
          value: "/output/WORKING/data/en"
        - name: edl_tab_link
          value: "en.linking.tab"
        - name: edl_tab_link_fb
          value: "en.linking.freebase.tab"
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START edl-nominal-coreference-en **" &>> ${log};
            echo "Begin edl-nominal-coreference-en for "${edl_tab_link} &>> ${log};
            /opt/conda/envs/aida_coreference/bin/python3.6 aida_coref.py -edl_official ${edl_output_dir}/${edl_tab_link} -edl_freebase ${edl_output_dir}/${edl_tab_link_fb} -l ${data_root}/ltf -o ${edl_output_dir}/merged_final.tab &>> ${log};
            echo `date` - "END edl-nominal-coreference-en" &>> ${log};
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## SPANISH edl-nominal-coreference
################################

      - name: edl-nominal-coreference-es
        image: laituan245/es_spanbert_entity_coref
        # resources:
        #   limits:
        #     nvidia.com/gpu: 1 # requesting 1 GPU
        workingDir: /app
        imagePullPolicy: IfNotPresent
        env:
        - name: data_root_es
          value: "/output/WORKING/data/es"
        - name: edl_tab_link_es
          value: "es.linking.tab"
        - name: edl_tab_link_fb_es
          value: "es.linking.freebase.tab"
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START edl-nominal-coreference-es **" &>> ${log};
            echo "Begin edl-nominal-coreference-es for "${edl_tab_link_es} &>> ${log};
            /opt/conda/envs/aida_coreference/bin/python3.6 aida_coref.py -edl_official ${edl_output_dir_es}/${edl_tab_link_es} -edl_freebase ${edl_output_dir_es}/${edl_tab_link_fb_es} -l ${data_root_es}/ltf -o ${edl_output_dir_es}/merged_final.tab &>> ${log};
            echo `date` - "END edl-nominal-coreference-es" &>> ${log};
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## RU dependency-based edl-nominal-conference-tabcs
################################
      - name: edl-nominal-conference-ru
        image: dylandilu/chuck_coreference
        workingDir: /scr
        imagePullPolicy: IfNotPresent
        env:
        - name: use_nominal_corefer
          value: "1"
        #RUSSIAN
        - name: udp_dir_ru
          value: "/output/WORKING/data/ru/udp"
        - name: edl_tab_link_ru
          value: "/output/WORKING/data/ru/edl/ru.linking.tab"
        - name: edl_tab_final_ru
          value: "/output/WORKING/data/ru/edl/merged_final.tab"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START edl-nominal-conference-ru **" &>> ${log};
            python appos_extract.py --udp_dir ${udp_dir_ru} --edl_tab_path ${edl_tab_link_ru} --path_out_coref ${edl_tab_final_ru} &>> ${log} &
            wait &>> ${log};
            echo `date` - "END edl-nominal-conference-ru" &>> ${log};

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)
        #NOTE: merge_final.tab was updated, but there's no stdout for run

################################
##  tabcs
################################
      - name: tabcs
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        #RUSSIAN
        - name: edl_output_dir_ru
          value: "/output/WORKING/data/ru/edl"
        #SPANISH
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START tabcs **" &>> ${log};
            /opt/conda/envs/py36/bin/python /entity/aida_edl/tab2cs.py ${edl_output_dir}/merged_final.tab ${edl_output_dir}/merged.cs 'EDL' &
            /opt/conda/envs/py36/bin/python /entity/aida_edl/tab2cs.py ${edl_output_dir_ru}/merged_final.tab ${edl_output_dir_ru}/merged.cs 'EDL' &
            /opt/conda/envs/py36/bin/python /entity/aida_edl/tab2cs.py ${edl_output_dir_es}/merged_final.tab ${edl_output_dir_es}/merged.cs 'EDL' &
            wait &>> ${log};
            echo `date` - "END tabcs" &>> ${log};

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Rewrite Relation and Event of OneIE system
################################
# new for oneie, and the command is:
# docker run --rm -v ${data_root}:${data_root} -v ${data_root}:${data_root} -w `pwd`  -i limanling/uiuc_ie_m36 \
#     /opt/conda/envs/py36/bin/python \
#     /aida_utilities/rewrite_entity_id.py \
#     ${edl_cs_oneie} ${relation_cs_oneie} ${event_coarse_oneie} ${edl_cs_coarse} \
#     ${relation_cs_coarse} ${event_coarse_without_time}
# # for all three languages
      - name: rewrite-relation-event-oneie
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: data_root
          value: "/output/WORKING/data/en"
        #RUSSIAN
        - name: data_root_ru
          value: "/output/WORKING/data/ru"
        #SPANISH
        - name: data_root_es
          value: "/output/WORKING/data/es"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START rewrite relation event OneIE **" &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/rewrite_entity_id.py ${data_root}/merge/cs/entity.cs ${data_root}/merge/cs/relation.cs ${data_root}/merge/cs/event.cs ${data_root}/edl/merged.cs ${data_root}/relation/en.rel.cs ${data_root}/event/event_rewrite.cs &
            /opt/conda/envs/py36/bin/python /aida_utilities/rewrite_entity_id.py ${data_root_es}/merge/cs/entity.cs ${data_root_es}/merge/cs/relation.cs ${data_root_es}/merge/cs/event.cs ${data_root_es}/edl/merged.cs ${data_root_es}/relation/es.rel.cs ${data_root_es}/event/event_rewrite.cs &
            /opt/conda/envs/py36/bin/python /aida_utilities/rewrite_entity_id.py ${data_root_ru}/merge/cs/entity.cs ${data_root_ru}/merge/cs/relation.cs ${data_root_ru}/merge/cs/event.cs ${data_root_ru}/edl/merged.cs ${data_root_ru}/relation/ru.rel.cs ${data_root_ru}/event/event_rewrite.cs &
            wait &>> ${log};
            echo `date` - "END rewrite relation event OneIE" &>> ${log};

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true # Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" # Please put your output here (WORKING, INTER-TA, NIST)

################################
## Filler Extraction & new relation
################################

      - name: filler-extract-new-relation
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: core_nlp_output_path
          value: "/output/WORKING/data/en/corenlp"
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: rsd_source
          value: "/output/WORKING/data/en/rsd"
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        - name: new_relation_coarse
          value: "/output/WORKING/data/en/relation/new_relation_en.cs"
        - name: filler_coarse
          value: "/output/WORKING/data/en/edl/filler_en.cs"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: core_nlp_output_path_ru
          value: "/output/WORKING/data/ru/corenlp"
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: rsd_source_ru
          value: "/output/WORKING/data/ru/rsd"
        - name: edl_output_dir_ru
          value: "/output/WORKING/data/ru/edl"
        - name: new_relation_coarse_ru
          value: "/output/WORKING/data/ru/relation/new_relation_ru.cs"
        - name: filler_coarse_ru
          value: "/output/WORKING/data/ru/edl/filler_ru.cs"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: core_nlp_output_path_es
          value: "/output/WORKING/data/es/corenlp"
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        - name: new_relation_coarse_es
          value: "/output/WORKING/data/es/relation/new_relation_es.cs"
        - name: filler_coarse_es
          value: "/output/WORKING/data/es/edl/filler_es.cs"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START filler extraction and new relation **" &>> ${log};
            /opt/conda/envs/py36/bin/python /entity/aida_filler/extract_filler_relation.py --corenlp_dir ${core_nlp_output_path} --ltf_dir ${ltf_source} --edl_path ${edl_output_dir}/merged.cs --text_dir ${rsd_source} --path_relation ${new_relation_coarse} --path_filler ${filler_coarse} --lang ${lang} &
            /opt/conda/envs/py36/bin/python /entity/aida_filler/extract_filler_relation.py --corenlp_dir ${core_nlp_output_path_ru} --ltf_dir ${ltf_source_ru} --edl_path ${edl_output_dir_ru}/merged.cs --text_dir ${rsd_source_ru} --path_relation ${new_relation_coarse_ru} --path_filler ${filler_coarse_ru} --lang ${lang_ru} &
            /opt/conda/envs/py36/bin/python /entity/aida_filler/extract_filler_relation.py --corenlp_dir ${core_nlp_output_path_es} --ltf_dir ${ltf_source_es} --edl_path ${edl_output_dir_es}/merged.cs --text_dir ${rsd_source_es} --path_relation ${new_relation_coarse_es} --path_filler ${filler_coarse_es} --lang ${lang_es} &
            wait &>> ${log};
            echo `date` - "END filler extraction and new relation" &>> ${log};

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Fine-grained entity typing
################################
      - name: fine-grained-entity
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: rsd_source
          value: "/output/WORKING/data/en/rsd"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: edl_output_dir_ru
          value: "/output/WORKING/data/ru/edl"
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: rsd_source_ru
          value: "/output/WORKING/data/ru/rsd"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START fine grained entity typing **" &>> ${log};
            /opt/conda/envs/py36/bin/python /entity/aida_edl/fine_grained_entity.py ${lang} ${edl_output_dir}/${lang}.linking.freebase.fine.json ${edl_output_dir}/${lang}.linking.freebase.tab ${edl_output_dir}/merged_fine.tsv ${edl_output_dir}/${lang}.linking.geo.json ${edl_output_dir}/merged.cs ${edl_output_dir}/merged_fine.cs ${edl_output_dir}/filler_fine.cs --filler_coarse ${edl_output_dir}/filler_${lang}.cs --ground_truth_tab_dir ${edl_output_dir}/ldc_anno_matched --ltf_dir ${ltf_source} --rsd_dir ${rsd_source} --eval m36 &
            /opt/conda/envs/py36/bin/python /entity/aida_edl/fine_grained_entity.py ${lang_ru} ${edl_output_dir_ru}/${lang_ru}.linking.freebase.fine.json ${edl_output_dir_ru}/${lang_ru}.linking.freebase.tab ${edl_output_dir_ru}/merged_fine.tsv ${edl_output_dir_ru}/${lang_ru}.linking.geo.json ${edl_output_dir_ru}/merged.cs ${edl_output_dir_ru}/merged_fine.cs ${edl_output_dir_ru}/filler_fine.cs --filler_coarse ${edl_output_dir_ru}/filler_${lang_ru}.cs --ground_truth_tab_dir ${edl_output_dir_ru}/ldc_anno_matched --ltf_dir ${ltf_source_ru} --rsd_dir ${rsd_source_ru} --eval m36 &
            /opt/conda/envs/py36/bin/python /entity/aida_edl/fine_grained_entity.py ${lang_es} ${edl_output_dir_es}/${lang_es}.linking.freebase.fine.json ${edl_output_dir_es}/${lang_es}.linking.freebase.tab ${edl_output_dir_es}/merged_fine.tsv ${edl_output_dir_es}/${lang_es}.linking.geo.json ${edl_output_dir_es}/merged.cs ${edl_output_dir_es}/merged_fine.cs ${edl_output_dir_es}/filler_fine.cs --filler_coarse ${edl_output_dir_es}/filler_${lang_es}.cs --ground_truth_tab_dir ${edl_output_dir_es}/ldc_anno_matched --ltf_dir ${ltf_source_es} --rsd_dir ${rsd_source_es} --eval m36 &

            wait &>> ${log};
            echo `date` - "Completed fine_grained_entity.py" &>> ${log};
            /opt/conda/envs/py36/bin/python /relation/FineRelationExtraction/utils/color_fillers.py --en_color_fill_tab_fname ${edl_output_dir}/${lang}.linking.col.tab --en_fill_cs_fname ${edl_output_dir}/filler_${lang}.cs --en_combo_outfname ${edl_output_dir}/filler_${lang}_all.cs --en_color_outfname ${edl_output_dir}/${lang}.color.cs &
            /opt/conda/envs/py36/bin/python /relation/FineRelationExtraction/utils/color_fillers.py --en_color_fill_tab_fname ${edl_output_dir_ru}/${lang_ru}.linking.col.tab --en_fill_cs_fname ${edl_output_dir_ru}/filler_${lang_ru}.cs --en_combo_outfname ${edl_output_dir_ru}/filler_${lang_ru}_all.cs --en_color_outfname ${edl_output_dir_ru}/${lang_ru}.color.cs &
            /opt/conda/envs/py36/bin/python /relation/FineRelationExtraction/utils/color_fillers.py --en_color_fill_tab_fname ${edl_output_dir_es}/${lang_es}.linking.col.tab --en_fill_cs_fname ${edl_output_dir_es}/filler_${lang_es}.cs --en_combo_outfname ${edl_output_dir_es}/filler_${lang_es}_all.cs --en_color_outfname ${edl_output_dir_es}/${lang_es}.color.cs &

            wait &>> ${log};
            echo `date` - "END Completed color_fillers.py" &>> ${log};

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)



################################
## Relation Extraction (fine) part 1
################################

      - name: relation-extraction-fine-part1
        image: limanling/uiuc_ie_m36
        resources:
          limits:
            nvidia.com/gpu: 1 # requesting 1 GPU
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        - name: source
          value: "" # no asr or ocr atm
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: rsd_source
          value: "/output/WORKING/data/en/rsd"
        - name: event_result_dir
          value: "/output/WORKING/data/en/event"
        - name: relation_result_dir
          value: "/output/WORKING/data/en/relation"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: edl_output_dir_ru
          value: "/output/WORKING/data/ru/edl"
        - name: source_ru
          value: "" # no asr or ocr atm
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: rsd_source_ru
          value: "/output/WORKING/data/ru/rsd"
        - name: event_result_dir_ru
          value: "/output/WORKING/data/ru/event"
        - name: relation_result_dir_ru
          value: "/output/WORKING/data/ru/relation"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        - name: source_es
          value: "" # no asr or ocr atm
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        - name: event_result_dir_es
          value: "/output/WORKING/data/es/event"
        - name: relation_result_dir_es
          value: "/output/WORKING/data/es/relation"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START relation extraction fine (Part 1) **" &>> ${log};
            /opt/conda/envs/py36/bin/python -u /relation/FineRelationExtraction/EVALfine_grained_relations.py --lang_id ${lang} --ltf_dir ${ltf_source} --rsd_dir ${rsd_source} --cs_fnames ${edl_output_dir}/merged.cs ${edl_output_dir}/filler_${lang}_all.cs ${relation_result_dir}/${lang}.rel.cs ${relation_result_dir}/new_relation_${lang}.cs ${event_result_dir}/event_rewrite.cs --fine_ent_type_tab ${edl_output_dir}/${lang}.linking.freebase.tab --fine_ent_type_json ${edl_output_dir}/${lang}.linking.freebase.fine.json --outdir ${relation_result_dir} --fine_grained &>> ${log};
            /opt/conda/envs/py36/bin/python -u /relation/FineRelationExtraction/EVALfine_grained_relations.py --lang_id ${lang_ru} --ltf_dir ${ltf_source_ru} --rsd_dir ${rsd_source_ru} --cs_fnames ${edl_output_dir_ru}/merged.cs ${edl_output_dir_ru}/filler_${lang_ru}_all.cs ${relation_result_dir_ru}/${lang_ru}.rel.cs ${relation_result_dir_ru}/new_relation_${lang_ru}.cs ${event_result_dir_ru}/event_rewrite.cs --fine_ent_type_tab ${edl_output_dir_ru}/${lang_ru}.linking.freebase.tab --fine_ent_type_json ${edl_output_dir_ru}/${lang_ru}.linking.freebase.fine.json --outdir ${relation_result_dir_ru} --fine_grained &>> ${log};
            /opt/conda/envs/py36/bin/python -u /relation_spa/FineRelationExtraction/EVALfine_grained_relations.py --lang_id ${lang_es} --ltf_dir ${ltf_source_es} --rsd_dir ${rsd_source_es} --cs_fnames ${edl_output_dir_es}/merged.cs ${edl_output_dir_es}/filler_${lang_es}_all.cs ${relation_result_dir_es}/${lang_es}.rel.cs ${relation_result_dir_es}/new_relation_${lang_es}.cs ${event_result_dir_es}/event_rewrite.cs  --fine_ent_type_tab ${edl_output_dir_es}/${lang_es}.linking.freebase.tab --fine_ent_type_json ${edl_output_dir_es}/${lang_es}.linking.freebase.fine.json --outdir ${relation_result_dir_es} --fine_grained &>> ${log};

            echo `date` - "END relation extraction fine (Part 1)" &>> ${log};

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Relation Extraction event time
################################
      - name: relation-extraction-event-time
        image: wenhycs/uiuc_event_time
        resources:
          limits:
            nvidia.com/gpu: 1 # requesting 1 GPU
        imagePullPolicy: IfNotPresent
        workingDir: /EventTimeArg
        env:
        - name: parent_child_tab_path
          value: "/input/docs/parent_children.tab"
        #ENGLISH
        - name: lang
          value: "en"
        - name: relation_result_dir
          value: "/output/WORKING/data/en/relation"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: relation_result_dir_ru
          value: "/output/WORKING/data/ru/relation"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: relation_result_dir_es
          value: "/output/WORKING/data/es/relation"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START aida_event_time_pipeline **" &>> ${log};
            python aida_event_time_pipeline.py --relation_cold_start_filename ${relation_result_dir}/${lang}/${lang}.fine_rel.cs --relation --parent_children_filename ${parent_child_tab_path} --output_filename ${relation_result_dir}/${lang}/${lang}_rel_4tuple.cs &>> ${log};
            python aida_event_time_pipeline.py --relation_cold_start_filename ${relation_result_dir_ru}/${lang_ru}/${lang_ru}.fine_rel.cs --relation --parent_children_filename ${parent_child_tab_path} --output_filename ${relation_result_dir_ru}/${lang_ru}/${lang_ru}_rel_4tuple.cs &>> ${log};
            python aida_event_time_pipeline.py --relation_cold_start_filename ${relation_result_dir_es}/${lang_es}/${lang_es}.fine_rel.cs --relation --parent_children_filename ${parent_child_tab_path} --output_filename ${relation_result_dir_es}/${lang_es}/${lang_es}_rel_4tuple.cs &>> ${log};
            echo `date` - "END aida_event_time_pipeline" &>> ${log};
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Relation Extraction (fine) part 2
################################
      - name: relation-extraction-fine-part2
        image: limanling/uiuc_ie_m36
        resources:
          limits:
            nvidia.com/gpu: 1 # requesting 1 GPU
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        - name: source
          value: "" # no asr or ocr atm
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: rsd_source
          value: "/output/WORKING/data/en/rsd"
        - name: event_result_dir
          value: "/output/WORKING/data/en/event"
        - name: relation_result_dir
          value: "/output/WORKING/data/en/relation"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: edl_output_dir_ru
          value: "/output/WORKING/data/ru/edl"
        - name: source_ru
          value: "" # no asr or ocr atm
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: rsd_source_ru
          value: "/output/WORKING/data/ru/rsd"
        - name: event_result_dir_ru
          value: "/output/WORKING/data/ru/event"
        - name: relation_result_dir_ru
          value: "/output/WORKING/data/ru/relation"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        - name: source_es
          value: "" # no asr or ocr atm
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        - name: event_result_dir_es
          value: "/output/WORKING/data/es/event"
        - name: relation_result_dir_es
          value: "/output/WORKING/data/es/relation"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START relation extraction fine (Part 2) **" &>> ${log};

            echo `date` - "merge" &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/pipeline_merge_m18.py --cs_fnames ${edl_output_dir}/merged_fine.cs ${edl_output_dir}/filler_fine.cs --output_file ${edl_output_dir}/merged_all_fine.cs &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/pipeline_merge_m18.py --cs_fnames ${edl_output_dir_ru}/merged_fine.cs ${edl_output_dir_ru}/filler_fine.cs --output_file ${edl_output_dir_ru}/merged_all_fine.cs &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/pipeline_merge_m18.py --cs_fnames ${edl_output_dir_es}/merged_fine.cs ${edl_output_dir_es}/filler_fine.cs --output_file ${edl_output_dir_es}/merged_all_fine.cs &>> ${log};
            
            wait &>> ${log};
            echo `date` - "add protester" &>> ${log};
            /opt/conda/envs/py36/bin/python /entity/aida_edl/add_protester.py ${event_result_dir}/event_rewrite.cs ${edl_output_dir}/merged_all_fine.cs ${edl_output_dir}/merged_all_fine_protester.cs &>> ${log};
            /opt/conda/envs/py36/bin/python /entity/aida_edl/add_protester.py ${event_result_dir_ru}/event_rewrite.cs ${edl_output_dir_ru}/merged_all_fine.cs ${edl_output_dir_ru}/merged_all_fine_protester.cs &>> ${log};
            /opt/conda/envs/py36/bin/python /entity/aida_edl/add_protester.py ${event_result_dir_es}/event_rewrite.cs ${edl_output_dir_es}/merged_all_fine.cs ${edl_output_dir_es}/merged_all_fine_protester.cs &>> ${log};
            echo `date` - "END relation extraction fine (Part 2)" &>> ${log};

            wait &>> ${log};
            echo `date` - "** Informative Justification ** RU" &>> ${log};
            /opt/conda/envs/py36/bin/python /entity/aida_edl/entity_informative.py ${edl_output_dir_ru}/chunk.txt ${edl_output_dir_ru}/merged_all_fine_protester.cs ${edl_output_dir_ru}/merged_all_fine_info.cs &>> ${log};
            echo `date` - "END Informative Justification RU" &>> ${log};

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Informative Justification
################################
      - name: informative-justification
        image: panx27/aida20_mention
        resources:
          limits:
            nvidia.com/gpu: 1 # requesting 1 GPU
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        - name: source
          value: "" # no asr or ocr atm
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: rsd_source
          value: "/output/WORKING/data/en/rsd"
        - name: event_result_dir
          value: "/output/WORKING/data/en/event"
        - name: relation_result_dir
          value: "/output/WORKING/data/en/relation"
        #RUSSIAN
#        - name: lang_ru
#          value: "ru"
#        - name: edl_output_dir_ru
#          value: "/output/WORKING/data/ru/edl"
#        - name: source_ru
#          value: "" # no asr or ocr atm
#        - name: ltf_source_ru
#          value: "/output/WORKING/data/ru/ltf"
#        - name: rsd_source_ru
#          value: "/output/WORKING/data/ru/rsd"
#        - name: event_result_dir_ru
#          value: "/output/WORKING/data/ru/event"
#        - name: relation_result_dir_ru
#          value: "/output/WORKING/data/ru/relation"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        - name: source_es
          value: "" # no asr or ocr atm
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        - name: event_result_dir_es
          value: "/output/WORKING/data/es/event"
        - name: relation_result_dir_es
          value: "/output/WORKING/data/es/relation"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START Informative Justification **" &>> ${log};
            python ./extend.py ${lang} ${ltf_source} ${edl_output_dir}/merged_all_fine_protester.cs ${edl_output_dir}/merged_all_fine_info.cs_tmp &>> ${log};
            python ./extend.py ${lang_es} ${ltf_source_es} ${edl_output_dir_es}/merged_all_fine_protester.cs ${edl_output_dir_es}/merged_all_fine_info.cs &>> ${log};

            wait &>> ${log};
            python ./revise.py ${edl_output_dir}/merged_all_fine_info.cs_tmp ${edl_output_dir}/merged_all_fine_info.cs &>> ${log};
            
            echo `date` - "END Informative Justification" &>> ${log};
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Relation Extraction (fine) part 3
################################
      - name: relation-extraction-fine-part3
        image: limanling/uiuc_ie_m36
        resources:
          limits:
            nvidia.com/gpu: 1 # requesting 1 GPU
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: data_root
          value: "/output/WORKING/data/en"
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        - name: source
          value: "" # no asr or ocr atm
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: rsd_source
          value: "/output/WORKING/data/en/rsd"
        - name: event_result_dir
          value: "/output/WORKING/data/en/event"
        - name: relation_result_dir
          value: "/output/WORKING/data/en/relation"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: data_root_ru
          value: "/output/WORKING/data/ru"
        - name: edl_output_dir_ru
          value: "/output/WORKING/data/ru/edl"
        - name: source_ru
          value: "" # no asr or ocr atm
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: rsd_source_ru
          value: "/output/WORKING/data/ru/rsd"
        - name: event_result_dir_ru
          value: "/output/WORKING/data/ru/event"
        - name: relation_result_dir_ru
          value: "/output/WORKING/data/ru/relation"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: data_root_es
          value: "/output/WORKING/data/es"
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        - name: source_es
          value: "" # no asr or ocr atm
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        - name: event_result_dir_es
          value: "/output/WORKING/data/es/event"
        - name: relation_result_dir_es
          value: "/output/WORKING/data/es/relation"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START relation extraction fine (Part 3) **" &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/rewrite_mention_confidence.py ${lang} ${data_root}/merge/mention/${lang}.nam.tab ${data_root}/merge/mention/${lang}.nom.tab ${data_root}/merge/mention/${lang}.pro.tab ${edl_output_dir}/${lang}.linking.tab ${edl_output_dir}/${lang}.linking.tab.candidates.json ${ltf_source} ${edl_output_dir}/merged_all_fine_info.cs ${edl_output_dir}/merged_all_fine_info_conf.cs ${edl_output_dir}/all_conf.txt &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/rewrite_mention_confidence.py ${lang_ru} ${data_root_ru}/merge/mention/${lang_ru}.nam.tab ${data_root_ru}/merge/mention/${lang_ru}.nom.tab ${data_root_ru}/merge/mention/${lang_ru}.pro.tab ${edl_output_dir_ru}/${lang_ru}.linking.tab ${edl_output_dir_ru}/${lang_ru}.linking.tab.candidates.json ${ltf_source_ru} ${edl_output_dir_ru}/merged_all_fine_info.cs ${edl_output_dir_ru}/merged_all_fine_info_conf.cs ${edl_output_dir_ru}/all_conf.txt &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/rewrite_mention_confidence.py ${lang_es} ${data_root_es}/merge/mention/${lang_es}.nam.tab ${data_root_es}/merge/mention/${lang_es}.nom.tab ${data_root_es}/merge/mention/${lang_es}.pro.tab ${edl_output_dir_es}/${lang_es}.linking.tab ${edl_output_dir_es}/${lang_es}.linking.tab.candidates.json ${ltf_source_es} ${edl_output_dir_es}/merged_all_fine_info.cs ${edl_output_dir_es}/merged_all_fine_info_conf.cs ${edl_output_dir_es}/all_conf.txt &>> ${log};
            echo `date` - "Completed rewrite_mention_confidence.py" &>> ${log};

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## EN - Event (Fine-grained)
################################
      - name: event-fine
        image: limanling/uiuc_ie_m36
        imagePullPolicy: Always
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: rsd_source
          value: "/output/WORKING/data/en/rsd"
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        - name: event_result_dir
          value: "/output/WORKING/data/en/event"
        - name: core_nlp_output_path
          value: "/output/WORKING/data/en/udp"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START event fine grained **" &>> ${log};
            /opt/conda/envs/py36/bin/python /event/aida_event/fine_grained/fine_grained_events.py ${lang} ${ltf_source} ${edl_output_dir}/${lang}.linking.freebase.fine.json ${edl_output_dir}/${lang}.linking.freebase.tab ${edl_output_dir}/merged.cs ${event_result_dir}/event_rewrite.cs ${event_result_dir}/events_fine.cs --filler_coarse ${edl_output_dir}/filler_${lang}.cs --entity_finegrain_aida ${edl_output_dir}/merged_all_fine.cs &>> ${log};
            echo "Event rule-based" &>> ${log};

            # wait &>> ${log};
            # /opt/conda/envs/py36/bin/python /event/aida_event/framenet/new_event_framenet.py ${event_result_dir}/framenet_res ${ltf_source} ${rsd_source} ${edl_output_dir}/merged.cs ${edl_output_dir}/filler_${lang}.cs ${event_result_dir}/events_fine.cs ${event_result_dir}/events_fine_framenet.cs &>> ${log};
            # echo `date` - "Completed new_event_framenet.py" &>> ${log};
            
            wait &>> ${log};
            /opt/conda/envs/py36/bin/python /event/aida_event/framenet/new_event_dependency.py ${rsd_source} ${core_nlp_output_path} ${edl_output_dir}/merged.cs ${edl_output_dir}/filler_${lang}.cs ${event_result_dir}/events_fine.cs ${event_result_dir}/events_fine_framenet.cs ${event_result_dir}/events_fine_depen.cs &>> ${log};
            echo `date` - "Completed new_event_dependency.py" &>> ${log};

            wait &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/pipeline_merge_m18.py --cs_fnames ${event_result_dir}/events_fine.cs ${event_result_dir}/events_fine_depen.cs --output_file ${event_result_dir}/events_fine_all.cs &>> ${log};
            # /opt/conda/envs/py36/bin/python /aida_utilities/pipeline_merge_m18.py --cs_fnames ${event_result_dir}/events_fine.cs ${event_result_dir}/events_fine_framenet.cs ${event_result_dir}/events_fine_depen.cs --output_file ${event_result_dir}/events_fine_all.cs &>> ${log};
            echo `date` - "Combine fine-grained typing and rule-based" &>> ${log};
            
            wait &>> ${log};
            /opt/conda/envs/py36/bin/python /event/aida_event/fine_grained/rewrite_args.py ${event_result_dir}/events_fine_all.cs ${ltf_source} ${event_result_dir}/events_fine_all_clean.cs_tmp ${lang} &>> ${log};
            wait &>> ${log};
            /opt/conda/envs/py36/bin/python /event/aida_event/fine_grained/rewrite_args.py ${event_result_dir}/events_fine_all_clean.cs_tmp ${ltf_source} ${event_result_dir}/events_fine_all_clean.cs ${lang} &>> ${log};
            echo `date` - "END Completed rewrite-args" &>> ${log};

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## RU\ES - Event (Fine-grained)
################################
      - name: event-fine-ru-es
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: edl_output_dir_ru
          value: "/output/WORKING/data/ru/edl"
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: rsd_source_ru
          value: "/output/WORKING/data/ru/rsd"
        - name: event_result_dir_ru
          value: "/output/WORKING/data/ru/event"
        - name: core_nlp_output_path_ru
          value: "/output/WORKING/data/ru/corenlp"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        - name: event_result_dir_es
          value: "/output/WORKING/data/es/event"
        - name: core_nlp_output_path_es
          value: "/output/WORKING/data/es/corenlp"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START Event Fine Grained RU ES" &>> ${log};
            /opt/conda/envs/py36/bin/python /event/aida_event/fine_grained/fine_grained_events.py ${lang_ru} ${ltf_source_ru} ${edl_output_dir_ru}/${lang_ru}.linking.freebase.fine.json ${edl_output_dir_ru}/${lang_ru}.linking.freebase.tab ${edl_output_dir_ru}/merged.cs ${event_result_dir_ru}/event_rewrite.cs ${event_result_dir_ru}/events_fine.cs --filler_coarse ${edl_output_dir_ru}/filler_${lang_ru}.cs --entity_finegrain_aida ${edl_output_dir_ru}/merged_all_fine.cs &>> ${log};
            /opt/conda/envs/py36/bin/python /event/aida_event/fine_grained/fine_grained_events.py ${lang_es} ${ltf_source_es} ${edl_output_dir_es}/${lang_es}.linking.freebase.fine.json ${edl_output_dir_es}/${lang_es}.linking.freebase.tab ${edl_output_dir_es}/merged.cs ${event_result_dir_es}/event_rewrite.cs ${event_result_dir_es}/events_fine.cs --filler_coarse ${edl_output_dir_es}/filler_${lang_es}.cs --entity_finegrain_aida ${edl_output_dir_es}/merged_all_fine.cs &>> ${log};
            echo `date` - " Event fine-grained typing RU ES" &>> ${log};
            echo "Event rule-based RU ES" &>> ${log};

            /opt/conda/envs/py36/bin/python /event/aida_event/fine_grained/rewrite_args.py ${event_result_dir_ru}/events_fine.cs ${ltf_source_ru} ${event_result_dir_ru}/events_fine_all_clean.cs_tmp ${lang_ru} &>> ${log};
            /opt/conda/envs/py36/bin/python /event/aida_event/fine_grained/rewrite_args.py ${event_result_dir_ru}/events_fine_all_clean.cs_tmp ${ltf_source_ru} ${event_result_dir_ru}/events_fine_all_clean.cs ${lang_ru} &>> ${log};
            /opt/conda/envs/py36/bin/python /event/aida_event/fine_grained/rewrite_args.py ${event_result_dir_es}/events_fine.cs ${ltf_source_es} ${event_result_dir_es}/events_fine_all_clean.cs_tmp ${lang_es} &>> ${log};
            /opt/conda/envs/py36/bin/python /event/aida_event/fine_grained/rewrite_args.py ${event_result_dir_es}/events_fine_all_clean.cs_tmp ${ltf_source_es} ${event_result_dir_es}/events_fine_all_clean.cs ${lang_es} &>> ${log};
            echo `date` - "Completed rewrite-args RU ES" &>> ${log};

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Event coreference
################################
## NOTE: Event coreference completely changed 2020-09-21
# docker run --rm -v ${data_root}:${data_root} --gpus '"device=1"' laituan245/spanbert_coref \
# -i ${event_fine_all_clean} -c ${event_corefer} -t ${event_corefer_confidence} -l ${ltf_source}
#             "Entrypoint": [
#                "/opt/conda/envs/aida_coreference/bin/python3.6",
#                "aida_event_coref.py"
# event_result_dir=${data_root}/event
# event_fine_all_clean=${event_result_dir}/events_fine_all_clean.cs
# event_corefer=${event_result_dir}/events_corefer.cs
# event_corefer_confidence=${event_result_dir}/events_corefer_confidence.tab
      - name: event-coreference
        image: laituan245/spanbert_coref
        resources:
          limits:
            nvidia.com/gpu: 1 # requesting 1 GPU
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: event_result_dir
          value: "/output/WORKING/data/en/event"
        # #RUSSIAN
        # - name: lang_ru
        #   value: "ru"
        # - name: ltf_source_ru
        #   value: "/output/WORKING/data/ru/ltf"
        # - name: rsd_source_ru
        #   value: "/output/WORKING/data/ru/rsd"
        # - name: event_result_dir_ru
        #   value: "/output/WORKING/data/ru/event"
        # #SPANISH
        # - name: lang_es
        #   value: "es"
        # - name: ltf_source_es
        #   value: "/output/WORKING/data/es/ltf"
        # - name: rsd_source_es
        #   value: "/output/WORKING/data/es/rsd"
        # - name: event_result_dir_es
        #   value: "/output/WORKING/data/es/event"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START Event Coreference" &>> ${log};
            /opt/conda/envs/aida_coreference/bin/python3.6 aida_event_coref.py -i ${event_result_dir}/events_fine_all_clean.cs -c ${event_result_dir}/events_corefer.cs -t ${event_result_dir}/events_corefer_confidence.tab -l ${ltf_source} &>> ${log};
            echo `date` - "END Event Coreference" &>> ${log};
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)


################################
## Event coreference - SPANISH
################################
      - name: event-coreference-es
        image: laituan245/es_event_coref
        resources:
          limits:
            nvidia.com/gpu: 1 # requesting 1 GPU
        imagePullPolicy: IfNotPresent
        env:
        # #ENGLISH
        # - name: lang
        #   value: "en"
        # - name: ltf_source
        #   value: "/output/WORKING/data/en/ltf"
        # - name: event_result_dir
        #   value: "/output/WORKING/data/en/event"
        # #RUSSIAN
        # - name: lang_ru
        #   value: "ru"
        # - name: ltf_source_ru
        #   value: "/output/WORKING/data/ru/ltf"
        # - name: rsd_source_ru
        #   value: "/output/WORKING/data/ru/rsd"
        # - name: event_result_dir_ru
        #   value: "/output/WORKING/data/ru/event"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        - name: event_result_dir_es
          value: "/output/WORKING/data/es/event"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START Event Coreference - ES" &>> ${log};
            /opt/conda/envs/aida_coreference/bin/python3.6 aida_event_coref.py -i ${event_result_dir_es}/events_fine_all_clean.cs -c ${event_result_dir_es}/events_corefer.cs -t ${event_result_dir_es}/events_corefer_confidence.tab -l ${ltf_source_es} &>> ${log};
            echo `date` - "END Event Coreference - ES" &>> ${log};
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Event coreference (RU/ES)
################################
      - name: event-coreference-ru-es
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: rsd_source
          value: "/output/WORKING/data/en/rsd"
        - name: event_result_dir
          value: "/output/WORKING/data/en/event"
        - name: event_corefer_confidence
          value: "events_corefer_confidence.tab"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: rsd_source_ru
          value: "/output/WORKING/data/ru/rsd"
        - name: event_result_dir_ru
          value: "/output/WORKING/data/ru/event"
        # SPANISH
        - name: lang_es
          value: "es"
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: rsd_source_es
          value: "/output/WORKING/data/es/rsd"
        - name: event_result_dir_es
          value: "/output/WORKING/data/es/event"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          ## NOTE: /event/aida_event_coreference/gail_event_coreference_test_${lang}.py -> r = requests.post('http://127.0.0.1:6001/aida_event_coreference_eng', json=json_string) -> r = requests.post('http://event-coreference-en:6001/aida_event_coreference_eng', json=json_string)
          # sed -i 's/127.0.0.1/event-coreference-ru/' /event/aida_event_coreference/gail_event_coreference_test.py;
          # sed -i 's/127.0.0.1/event-coreference-es/' /event/aida_event_coreference/gail_event_coreference_test.py;
          - echo `date` - "** Event coreference RU **" &>> ${log};
            /opt/conda/envs/py36/bin/python /event/aida_event_coreference/gail_event_coreference_test.py -i ${event_result_dir_ru}/events_fine_all_clean.cs -o ${event_result_dir_ru}/events_corefer.cs -c ${event_result_dir_ru}/events_corefer_confidence.tab -r ${rsd_source_ru} -l ${lang_ru} --kubernetes &>> ${log};
            echo `date` - "Completed Event coreference RU";

            # # sed -i 's/127.0.0.1/event-coreference-es/' /event/aida_event_coreference/gail_event_coreference_test.py;
            # echo `date` - "** Event coreference ES **";
            # /opt/conda/envs/py36/bin/python /event/aida_event_coreference/gail_event_coreference_test.py -i ${event_result_dir_es}/events_fine_all_clean.cs -o ${event_result_dir_es}/events_corefer.cs -c ${event_result_dir_es}/events_corefer_confidence.tab -r ${rsd_source_es} -l ${lang_es} --kubernetes &>> ${log};
            # echo `date` - "Completed Event coreference ES";
          
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)


################################
## Temporal 4 tuple generation
################################
      - name: temporal-4-tuple
        image: wenhycs/uiuc_event_time
        resources:
          limits:
            nvidia.com/gpu: 1 # requesting 1 GPU
        imagePullPolicy: IfNotPresent
        workingDir: /EventTimeArg
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: time_cold_start_filename
          value: "/output/WORKING/data/en/edl/filler_en.cs"
        - name: event_cold_start_filename
          value: "/output/WORKING/data/en/event/events_corefer.cs"
        - name: parent_child_tab_path
          value: "/input/docs/parent_children.tab"
        - name: ltf_path
          value: "/output/WORKING/data/en/ltf"
        - name: output_filename
          value: "/output/WORKING/data/en/event/events_4tuple.cs"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: time_cold_start_filename_ru
          value: "/output/WORKING/data/ru/edl/filler_ru.cs"
        - name: event_cold_start_filename_ru
          value: "/output/WORKING/data/ru/event/events_corefer.cs"
        - name: parent_child_tab_path_ru
          value: "/input/docs/parent_children.tab"
        - name: output_filename_ru
          value: "/output/WORKING/data/ru/event/events_4tuple.cs"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: time_cold_start_filename_es
          value: "/output/WORKING/data/es/edl/filler_es.cs"
        - name: event_cold_start_filename_es
          value: "/output/WORKING/data/es/event/events_corefer.cs"
        - name: parent_child_tab_path_es
          value: "/input/docs/parent_children.tab"
        - name: output_filename_es
          value: "/output/WORKING/data/es/event/events_4tuple.cs"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
         - echo `date` - "** START Temporal 4 tuple generation **" &>> ${log};
           python aida_event_time_pipeline.py --time_cold_start_filename ${time_cold_start_filename} --event_cold_start_filename ${event_cold_start_filename} --read_cs_event --parent_children_filename ${parent_child_tab_path} --use_dct_as_default --ltf_path ${ltf_path} --output_filename ${output_filename} --lang ${lang} &>> ${log};
           python aida_event_time_pipeline.py --time_cold_start_filename ${time_cold_start_filename_ru} --event_cold_start_filename ${event_cold_start_filename_ru} --parent_children_filename ${parent_child_tab_path_ru} --output_filename ${output_filename_ru} --lang ${lang_ru} &>> ${log};
           python aida_event_time_pipeline.py --time_cold_start_filename ${time_cold_start_filename_es} --event_cold_start_filename ${event_cold_start_filename_es} --parent_children_filename ${parent_child_tab_path_es} --output_filename ${output_filename_es} --lang ${lang_es} &>> ${log};
           wait &>> ${log};
           echo `date` - "END Temporal 4 tuple generation **" &>> ${log};
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Event Informative Justification
################################
      - name: event-info-justification
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: event_corefer_time
          value: "/output/WORKING/data/en/event/events_4tuple.cs"
        - name: event_final
          value: "/output/WORKING/data/en/event/events_info.cs"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: event_corefer_time_ru
          value: "/output/WORKING/data/ru/event/events_4tuple.cs"
        - name: event_final_ru
          value: "/output/WORKING/data/ru/event/events_info.cs"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: event_corefer_time_es
          value: "/output/WORKING/data/es/event/events_4tuple.cs"
        - name: event_final_es
          value: "/output/WORKING/data/es/event/events_info.cs"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
         - echo `date` - "** START Event Informative Justification **" &>> ${log};
           /opt/conda/envs/py36/bin/python /event/aida_event/postprocessing_event_informative_mentions.py ${ltf_source} ${event_corefer_time} ${event_final} --eval m36 &>> ${log};
           /opt/conda/envs/py36/bin/python /event/aida_event/postprocessing_event_informative_mentions.py ${ltf_source_ru} ${event_corefer_time_ru} ${event_final_ru} --eval m36 &>> ${log};
           /opt/conda/envs/py36/bin/python /event/aida_event/postprocessing_event_informative_mentions.py ${ltf_source_es} ${event_corefer_time_es} ${event_final_es} --eval m36 &>> ${log};
           wait &>> ${log};
           echo `date` - "END Event Informative Justification" &>> ${log};
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## Final Merge -> Format converter
################################
      - name: final-merge
        image: limanling/uiuc_ie_m36
        resources:
          limits:
            nvidia.com/gpu: 1 # requesting 1 GPU
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: event_result_dir
          value: "/output/WORKING/data/en/event"
        - name: data_root
          value: "/output/WORKING/data/en"
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        - name: relation_result_dir
          value: "/output/WORKING/data/en/relation"
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: parent_child_tab_path
          value: "/input/docs/parent_children.tab"
        # - name: edl_vec_file
        #   value: "en.mention.hidden.txt"
        # - name: evt_vec_file
        #   value: "en.trigger.hidden.txt"
        # - name: edl_tab_freebase_file
        #   value: "en.linking.freebase.tab"
        # - name: edl_json_fine_file
        #   value: "en.linking.freebase.fine.json"
        # - name: lorelei_link_private_data
        #   value: "lorelei_private_data.json"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: event_result_dir_ru
          value: "/output/WORKING/data/ru/event"
        - name: data_root_ru
          value: "/output/WORKING/data/ru"
        - name: edl_output_dir_ru
          value: "/output/WORKING/data/ru/edl"
        - name: relation_result_dir_ru
          value: "/output/WORKING/data/ru/relation"
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: parent_child_tab_path_ru
          value: "/input/docs/parent_children.tab"
        # - name: edl_vec_file_ru
        #   value: "ru.mention.hidden.txt"
        # - name: evt_vec_file_ru
        #   value: "ru.trigger.hidden.txt"
        # - name: edl_tab_freebase_file_ru
        #   value: "ru.linking.freebase.tab"
        # - name: edl_json_fine_file_ru
        #   value: "ru.linking.freebase.fine.json"
        # - name: lorelei_link_private_data_ru
        #   value: "lorelei_private_data.json"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: event_result_dir_es
          value: "/output/WORKING/data/es/event"
        - name: data_root_es
          value: "/output/WORKING/data/es"
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        - name: relation_result_dir_es
          value: "/output/WORKING/data/es/relation"
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: parent_child_tab_path_es
          value: "/input/docs/parent_children.tab"
        # - name: edl_vec_file_es
        #   value: "es.mention.hidden.txt"
        # - name: evt_vec_file_es
        #   value: "es.trigger.hidden.txt"
        # - name: edl_tab_freebase_file_es
        #   value: "es.linking.freebase.tab"
        # - name: edl_json_fine_file_es
        #   value: "es.linking.freebase.fine.json"
        # - name: lorelei_link_private_data_es
        #   value: "lorelei_private_data.json"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** Merging all items **" &>> ${log};
            /opt/conda/envs/py36/bin/python /postprocessing/pipeline_merge.py --cs_fnames ${edl_output_dir}/merged_all_fine_info_conf.cs ${edl_output_dir}/${lang}.color.cs ${relation_result_dir}/${lang}/${lang}_rel_4tuple.cs ${event_result_dir}/events_info.cs --output_file ${data_root}/${lang}_full.cs --eval m36 &>> ${log};
            /opt/conda/envs/py36/bin/python /postprocessing/pipeline_merge.py --cs_fnames ${edl_output_dir_ru}/merged_all_fine_info_conf.cs ${edl_output_dir_ru}/${lang_ru}.color.cs ${relation_result_dir_ru}/${lang_ru}/${lang_ru}_rel_4tuple.cs ${event_result_dir_ru}/events_info.cs --output_file ${data_root_ru}/${lang_ru}_full.cs --eval m36 &>> ${log};
            /opt/conda/envs/py36/bin/python /postprocessing/pipeline_merge.py --cs_fnames ${edl_output_dir_es}/merged_all_fine_info_conf.cs ${edl_output_dir_es}/${lang_es}.color.cs ${relation_result_dir_es}/${lang_es}/${lang_es}_rel_4tuple.cs ${event_result_dir_es}/events_info.cs --output_file ${data_root_es}/${lang_es}_full.cs --eval m36 &>> ${log};

            wait &>> ${log};
            echo `date` - "multiple lorelei links" &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/postprocessing_link_confidence.py ${edl_output_dir}/${lang}.linking.tab.candidates.json ${data_root}/${lang}_full.cs ${data_root}/${lang}_full_link.cs ${edl_output_dir}/lorelei_private_data.json --eval m36 &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/postprocessing_link_confidence.py ${edl_output_dir_ru}/${lang_ru}.linking.tab.candidates.json ${data_root_ru}/${lang_ru}_full.cs ${data_root_ru}/${lang_ru}_full_link.cs ${edl_output_dir_ru}/lorelei_private_data.json --eval m36 &>> ${log};
            /opt/conda/envs/py36/bin/python /aida_utilities/postprocessing_link_confidence.py ${edl_output_dir_es}/${lang_es}.linking.tab.candidates.json ${data_root_es}/${lang_es}_full.cs ${data_root_es}/${lang_es}_full_link.cs ${edl_output_dir_es}/lorelei_private_data.json --eval m36 &>> ${log};

            wait &>> ${log};
            echo `date` - "Start AIF converter" &>> ${log};
            /opt/conda/envs/aida_entity/bin/python /postprocessing/aif_converter_combine.py --input_cs ${data_root}/${lang}_full_link.cs --ltf_dir ${ltf_source} --output_ttl_dir ${data_root}/initial --lang ${lang} --eval m36 --evt_coref_score_tab ${event_result_dir}/events_corefer_confidence.tab --source_tab ${parent_child_tab_path} --ent_vec_dir ${data_root}/merge/mention --ent_vec_files ${lang}.mention.hidden.txt --evt_vec_dir ${data_root}/merge/mention --evt_vec_files ${lang}.trigger.hidden.txt --event_embedding_from_file --freebase_tab ${edl_output_dir}/${lang}.linking.freebase.tab --fine_grained_entity_type_path ${edl_output_dir}/${lang}.linking.freebase.fine.json --lorelei_link_mapping ${edl_output_dir}/lorelei_private_data.json --parent_child_tab_path ${parent_child_tab_path} &>> ${log};
            /opt/conda/envs/aida_entity/bin/python /postprocessing/aif_converter_combine.py --input_cs ${data_root_ru}/${lang_ru}_full_link.cs --ltf_dir ${ltf_source_ru} --output_ttl_dir ${data_root_ru}/initial --lang ${lang_ru} --eval m36 --evt_coref_score_tab ${event_result_dir_ru}/events_corefer_confidence.tab --source_tab ${parent_child_tab_path_ru} --ent_vec_dir ${data_root_ru}/merge/mention --ent_vec_files ${lang_ru}.mention.hidden.txt --evt_vec_dir ${data_root_ru}/merge/mention --evt_vec_files ${lang_ru}.trigger.hidden.txt --event_embedding_from_file --freebase_tab ${edl_output_dir_ru}/${lang_ru}.linking.freebase.tab --fine_grained_entity_type_path ${edl_output_dir_ru}/${lang_ru}.linking.freebase.fine.json --lorelei_link_mapping ${edl_output_dir_ru}/lorelei_private_data.json --parent_child_tab_path ${parent_child_tab_path_ru} &>> ${log};
            /opt/conda/envs/aida_entity/bin/python /postprocessing/aif_converter_combine.py --input_cs ${data_root_es}/${lang_es}_full_link.cs --ltf_dir ${ltf_source_es} --output_ttl_dir ${data_root_es}/initial --lang ${lang_es} --eval m36 --evt_coref_score_tab ${event_result_dir_es}/events_corefer_confidence.tab --source_tab ${parent_child_tab_path_es} --ent_vec_dir ${data_root_es}/merge/mention --ent_vec_files ${lang_es}.mention.hidden.txt --evt_vec_dir ${data_root_es}/merge/mention --evt_vec_files ${lang_es}.trigger.hidden.txt --event_embedding_from_file --freebase_tab ${edl_output_dir_es}/${lang_es}.linking.freebase.tab --fine_grained_entity_type_path ${edl_output_dir_es}/${lang_es}.linking.freebase.fine.json --lorelei_link_mapping ${edl_output_dir_es}/lorelei_private_data.json --parent_child_tab_path ${parent_child_tab_path_es} &>> ${log};

            echo `date` - "END AIF converter" &>> ${log};

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)


################################
## Append private information
################################
      - name: append-private-information
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        #ENGLISH
        - name: lang
          value: "en"
        - name: data_root
          value: "output/WORKING/data/en"
        - name: edl_output_dir
          value: "/output/WORKING/data/en/edl"
        - name: source
          value: "" # no asr or ocr atm
        - name: ltf_source
          value: "/output/WORKING/data/en/ltf"
        - name: parent_child_tab_path
          value: /input/docs/parent_children.tab
        - name: sorted
          value: "0"
        - name: edl_vec_file1
          value: "en_nom_5type.mention.hidden.txt"
        - name: edl_vec_file2
          value: "en_nom_wv.mention.hidden.txt"
        - name: edl_vec_file3
          value: "en_pro.mention.hidden.txt"
        - name: edl_vec_file4
          value: "en_nam.mention.hidden.txt"
        #RUSSIAN
        - name: lang_ru
          value: "ru"
        - name: data_root_ru
          value: "output/WORKING/data/ru"
        - name: edl_output_dir_ru
          value: "/output/WORKING/data/ru/edl"
        - name: source_ru
          value: "" # no asr or ocr atm
        - name: ltf_source_ru
          value: "/output/WORKING/data/ru/ltf"
        - name: parent_child_tab_path_ru
          value: /input/docs/parent_children.tab
        - name: sorted_ru
          value: "0"
        - name: edl_vec_file1_ru
          value: "ru_nam_5type.mention.hidden.txt"
        - name: edl_vec_file2_ru
          value: "ru_nam_wv.mention.hidden.txt"
        #SPANISH
        - name: lang_es
          value: "es"
        - name: data_root_es
          value: "output/WORKING/data/es"
        - name: edl_output_dir_es
          value: "/output/WORKING/data/es/edl"
        - name: source_es
          value: "" # no asr or ocr atm
        - name: ltf_source_es
          value: "/output/WORKING/data/es/ltf"
        - name: parent_child_tab_path_es
          value: /input/docs/parent_children.tab
        - name: sorted_es
          value: "0"
        - name: edl_vec_file1_es
          value: "es_nam_5type.mention.hidden.txt"
        - name: edl_vec_file2_es
          value: "es_nam_wv.mention.hidden.txt"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          #NOTE: KeyError here
          - echo `date` - "** START append-private-information **" &>> ${log};

            /opt/conda/envs/py36/bin/python /postprocessing/postprocessing_rename_turtle.py --language_id ${lang} --input_private_folder ${data_root}/initial --output_folder ${data_root}/final --parent_child_tab_path ${parent_child_tab_path} --parent_child_mapping_sorted ${sorted} &>> ${log};
            /opt/conda/envs/py36/bin/python /postprocessing/postprocessing_rename_turtle.py --language_id ${lang_ru} --input_private_folder ${data_root_ru}/initial --output_folder ${data_root_ru}/final --parent_child_tab_path ${parent_child_tab_path_ru} --parent_child_mapping_sorted ${sorted_ru} &>> ${log};
            /opt/conda/envs/py36/bin/python /postprocessing/postprocessing_rename_turtle.py --language_id ${lang_es} --input_private_folder ${data_root_es}/initial --output_folder ${data_root_es}/final --parent_child_tab_path ${parent_child_tab_path_es} --parent_child_mapping_sorted ${sorted_es} &>> ${log};

            chmod -R 777 ${data_root}/final ${data_root}/initial &>> ${log};
            chmod -R 777 ${data_root_ru}/final ${data_root_ru}/initial &>> ${log};
            chmod -R 777 ${data_root_es}/final ${data_root_es}/initial &>> ${log};

            echo `date` - "END append-private-information" &>> ${log};
            echo "Final result in Cold Start Format is in "${data_root}/${lang}_full_link.cs &>> ${log};
            echo "Final result in RDF Format is in "${data_root}/final &>> ${log};
            echo "Final result in Cold Start Format is in "${data_root_ru}/${lang_ru}_full_link.cs &>> ${log};
            echo "Final result in RDF Format is in "${data_root_ru}/final &>> ${log};
            echo "Final result in Cold Start Format is in "${data_root_es}/${lang_es}_full_link.cs &>> ${log};
            echo "Final result in RDF Format is in "${data_root_es}/final &>> ${log};

            find ${data_root_es} -name 'merged.cs' &>> ${log};
            find ${data_root_es} -name 'merged_final.tab' &>> ${log};
            find ${data_root_es} -name 'events_tme.cs' &>> ${log};
#TODO: copy files for sentiment to /output/WORKING/uiuc_ttl_results/
#TODO: copy files needed by CU, text mention results in /output/WORKING/uiuc_ttl_results
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)


################################
## merging UIUC three languages
################################
      - name: merging-results
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        - name: data_root
          value: "/output/WORKING/data/"
        - name: output_ttl
          value: "/output/WORKING/data/kb/ttl"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START Merging Results **" &>> ${log};
            /opt/conda/envs/py36/bin/python /postprocessing/postprocessing_combine_turtle_from_all_sources.py --root_folder ${data_root} --final_dir_name 'final' --output_folder ${output_ttl} &>> ${log};
            echo "Final output of English, Russian, Spanish in "${output_ttl} &>> ${log};
            echo `date` - "END Merging UIUC cross-language Results" &>> ${log};
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)


      restartPolicy: Never

################################
## containers:
################################
      containers:


################################
## CleanKB preparation
################################
      - name: cleankb-params
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        - name: data_root
          value: "/output/WORKING/data/"
        - name: output_ttl
          value: "/output/WORKING/data/kb/ttl" # TODO: change to final output
        - name: final_ttl
          value: "/output/WORKING/data/final_clean"
        - name: variant
          value: "1"
        - name: parent_child_tab_path
          value: "/input/docs/parent_children.tab"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START CleanKB param preparation **" &>> ${log};
            /opt/conda/envs/py36/bin/python /postprocessing/postprocessing_cleankb_params_caci.py ${data_root}/cleankb.param ${output_ttl} ${final_ttl} ${variant} --parent_child_tab_path ${parent_child_tab_path} --eval m36 &>> ${log};
            echo "Final output of English, Russian, Spanish in "${output_ttl} &>> ${log};
            echo `date` - "END CleanKB param preparation" &>> ${log};
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## CleanKB
################################
      - name: cleankb
        image: limanling/aida-tools
        imagePullPolicy: IfNotPresent
        workingDir: /aida-tools-java11
        env:
        - name: data_root
          value: "/output/WORKING/data"
        - name: log
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
          - echo `date` - "** START CleanKB **" &>> ${log};
            /aida-tools-java11/aida-eval-tools/target/appassembler/bin/cleanKB ${data_root}/cleankb.param &
            wait &>> ${log};
            mkdir -p /output/NIST;
            cp /output/WORKING/data/final_clean/*.ttl /output/NIST;
            ls -ahl /output/NIST &>> ${log};
            echo `date` - "END CleanKB" &>> ${log};

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true
          - name: output-efs
            mountPath: "/output"



      imagePullSecrets:
        - name: regcred
      restartPolicy: Never
      nodeSelector:
        eks.amazonaws.com/nodegroup: gaia-eks-nodegroup
