apiVersion: batch/v1
kind: Job
metadata:
 name: gaia-ta1-pipeline
spec:
  backoffLimit: 0
  template:
 #   metadata:
 #     name: gaia-ta1-pipeline
    spec:
      volumes:
        - name: input-efs
          nfs:
            server: fs-f330b371.efs.us-east-1.amazonaws.com #m36-dryrun-source-LDC2020E11-SMALL
            path: /
        - name: output-efs
          nfs:
            server: fs-4bc84ac9.efs.us-east-1.amazonaws.com #teamgaia-ta1-output # sudo mount -t
            path: /
        #If you want to use a local folder as a volume, you can remove the NFS above and recreate them with a local volume for testing. The names need to match with the volumeMounts of the container
        # - name: input-efs
          # hostPath:
          # path: "C:/some/local/input"
        # - name: output-efs
          # hostPath:
          # path: "C:/some/local/output"

      initContainers:

###############################
# ISI AIDA-TOOLS
###############################
## ISI: DPN
## see https://hub.docker.com/repository/docker/gaiaaida/aida-tools
## python ./extract_mp4.py ./extract_mp4.docker_default.param
      - name: isi-aida-tools
        image: gaiaaida/aida-tools:0.2
        imagePullPolicy: IfNotPresent
        env:
        - name: parent_child_tab
          value: "/input/docs/parent_children.tab"
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: INPUT_MP4_LDCC
          value: "/input/data/mp4"
        - name: OUTPUT_MP4
          value: "/output/WORKING/mp4"
        - name: log_filename
          value: "/output/WORKING/full-text-log.txt"
        - name: param_filename
          value: "/output/WORKING/usc.objdet.M36.param"
        command: ["/bin/bash", "-c"]
        args:
#            echo -e "input_mp4_ldcc_dir:${INPUT_MP4_LDCC} \noutput_mp4_dir:${OUTPUT_MP4} \n" &>> ${param_filename};
         - echo `date` - "** START AIDA Tools **";
           mkdir -p /output/WORKING;
           echo `date` - "** START AIDA Tools **" &>> ${log_filename};
           mkdir -p ${OUTPUT_MP4};
           echo "input_mp4_ldcc_dir:" "/input/data/mp4" &>> ${param_filename};
           echo "output_mp4_dir:" "/output/WORKING/mp4" &>> ${param_filename};
           pwd &>> ${log_filename};
           ls -ahl /output/WORKING &>> ${log_filename};
           cat ${param_filename} &>> ${log_filename};
           echo  "extract_mp4.py >>>" &>> ${log_filename};
           /root/conda/envs/aida-env/bin/python ./extract_mp4.py ${param_filename} &>> ${log_filename};
           ls -ahl ${OUTPUT_MP4}  &>> ${log_filename};
           echo `date` - "END AIDA Tools" &>> ${log_filename};

        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

################################
## USC Object Detection
################################
## USC: Haidong Zhu
## https://hub.docker.com/repository/docker/gaiaaida/detection-grounding
## See https://github.com/isi-vista/aida-integration/#usc-object-detection

      - name: usc-object-detection
        image: gaiaaida/detection-grounding:0.3
        imagePullPolicy: IfNotPresent
        env:
        - name: parent_child_tab
          value: "/input/docs/parent_children.tab"
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: INPUT
          value: "/input"
        - name: OUTPUT
          value: "/output"
        - name: SHARED
          value: "/output/WORKING"
        - name: OBJDET_OUTPUT
          value: "/output/WORKING/usc-object-detection/"
        - name: log_filename
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
# Output is located at /upload/USC_Vision_Data/m18_eval/. 
# There are two folders: one using pascal voc (m18_eval_usc_vision_voc) 
# and other using oi (m18_eval_usc_vision_oi). 
# Each contains 4 files; 3 of them are about jpg, png, representative_frames, 
# and the last one just has all of them in one file.
# this should only do the USC object detection, not the grounding.
         - echo `date` - "** START USC Object Detection **" &>> ${log_filename};
           mkdir -p /upload/USC_Vision_Data/m18_eval/;
           mkdir -p ${OBJDET_OUTPUT};
           cd /aida/src/;
           /root/conda/envs/aida-env/bin/python ./code/smoke_test.py &>> ${log_filename};
           pwd &>> ${log_filename};
           ls -ahl ./data &>> ${log_filename};
           /root/conda/envs/aida-env/bin/python ./code/aida_ds_creator.py &>> ${log_filename};
           find /upload/USC_Vision_Data/m18_eval -name '*.*'  &>> ${log_filename};
           RESULTS=/upload/USC_Vision_Data/m18_eval;
           ls -ahl ${RESULTS}  &>> ${log_filename};
           cp -r ${RESULTS} ${OBJDET_OUTPUT} &>> ${log_filename};
           echo `date` - "END USC Object Detection" &>> ${log_filename};
# TODO: confirm exact files copied out.
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

      restartPolicy: Never

################################
## containers:
################################
      containers:

################################
## merging-results
################################

      - name: merging-results
        image: limanling/uiuc_ie_m36
        imagePullPolicy: IfNotPresent
        env:
        - name: log_filename
          value: "/output/WORKING/full-text-log.txt"
        command: ["/bin/bash", "-c"]
        args:
# needs '/output/WORKING/data/validator_candidates_list'
# TODO: which component creates
          - echo `date` - "START Merging Results" &>> ${log_filename};
            ls -ahl "/output/WORKING/data" &>> ${log_filename};
            /opt/conda/envs/py36/bin/python /postprocessing/postprocessing_combine_turtle_from_all_sources.py
            --root_folder /output/WORKING/data
            --final_dir_name final
            --output_folder /output/INTER-TA &>> ${log_filename};
            echo `date` - "END Merging Results" &>> ${log_filename};
            #sleep 8h
            #sleep is used to allow me to get into the container with: kubectl exec -it gaia-ta1-pipeline-xxxxx -c merging-results
        volumeMounts:
          - name: input-efs
            mountPath: "/input"
            readOnly: true #Input Volume for worker will be set to readOnly
          - name: output-efs
            mountPath: "/output" #Please put your output here (WORKING, INTER-TA, NIST)

      imagePullSecrets:
        - name: regcred
      restartPolicy: Never
      nodeSelector:
        eks.amazonaws.com/nodegroup: gaia-eks-nodegroup
